{"version":3,"file":"redis.cjs.js","sources":["../../src/cache/redis.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Keyv from 'keyv';\nimport KeyvRedis from '@keyv/redis';\nimport { v4 as uuid } from 'uuid';\nimport { Instance } from './types';\n\nasync function attemptRedisConnection(connection: string): Promise<Keyv> {\n  const startTime = Date.now();\n\n  for (;;) {\n    try {\n      const store = new KeyvRedis(connection);\n      const keyv = new Keyv({ store });\n      const value = uuid();\n      await keyv.set('test', value);\n      if ((await keyv.get('test')) === value) {\n        return keyv;\n      }\n    } catch (e) {\n      if (Date.now() - startTime > 30_000) {\n        throw new Error(\n          `Timed out waiting for redis to be ready for connections, ${e}`,\n        );\n      }\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\nexport async function connectToExternalRedis(\n  connection: string,\n): Promise<Instance> {\n  const keyv = await attemptRedisConnection(connection);\n  return {\n    store: 'redis',\n    connection,\n    keyv,\n    stop: async () => await keyv.disconnect(),\n  };\n}\n\nexport async function startRedisContainer(image: string): Promise<Instance> {\n  // Lazy-load to avoid side-effect of importing testcontainers\n  const { GenericContainer } =\n    require('testcontainers') as typeof import('testcontainers');\n\n  const container = await new GenericContainer(image)\n    .withExposedPorts(6379)\n    .start();\n\n  const host = container.getHost();\n  const port = container.getMappedPort(6379);\n  const connection = `redis://${host}:${port}`;\n\n  const keyv = await attemptRedisConnection(connection);\n\n  return {\n    store: 'redis',\n    connection,\n    keyv,\n    stop: async () => {\n      await keyv.disconnect();\n      await container.stop({ timeout: 10_000 });\n    },\n  };\n}\n"],"names":["KeyvRedis","Keyv","uuid"],"mappings":";;;;;;;;;;;AAqBA,eAAe,uBAAuB,UAAmC,EAAA;AACvE,EAAM,MAAA,SAAA,GAAY,KAAK,GAAI,EAAA;AAE3B,EAAS,WAAA;AACP,IAAI,IAAA;AACF,MAAM,MAAA,KAAA,GAAQ,IAAIA,0BAAA,CAAU,UAAU,CAAA;AACtC,MAAA,MAAM,IAAO,GAAA,IAAIC,qBAAK,CAAA,EAAE,OAAO,CAAA;AAC/B,MAAA,MAAM,QAAQC,OAAK,EAAA;AACnB,MAAM,MAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,KAAK,CAAA;AAC5B,MAAA,IAAK,MAAM,IAAA,CAAK,GAAI,CAAA,MAAM,MAAO,KAAO,EAAA;AACtC,QAAO,OAAA,IAAA;AAAA;AACT,aACO,CAAG,EAAA;AACV,MAAA,IAAI,IAAK,CAAA,GAAA,EAAQ,GAAA,SAAA,GAAY,GAAQ,EAAA;AACnC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,4DAA4D,CAAC,CAAA;AAAA,SAC/D;AAAA;AACF;AAGF,IAAA,MAAM,IAAI,OAAQ,CAAA,CAAA,OAAA,KAAW,UAAW,CAAA,OAAA,EAAS,GAAG,CAAC,CAAA;AAAA;AAEzD;AAEA,eAAsB,uBACpB,UACmB,EAAA;AACnB,EAAM,MAAA,IAAA,GAAO,MAAM,sBAAA,CAAuB,UAAU,CAAA;AACpD,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,OAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,IAAM,EAAA,YAAY,MAAM,IAAA,CAAK,UAAW;AAAA,GAC1C;AACF;AAEA,eAAsB,oBAAoB,KAAkC,EAAA;AAE1E,EAAA,MAAM,EAAE,gBAAA,EACN,GAAA,OAAA,CAAQ,gBAAgB,CAAA;AAE1B,EAAM,MAAA,SAAA,GAAY,MAAM,IAAI,gBAAA,CAAiB,KAAK,CAC/C,CAAA,gBAAA,CAAiB,IAAI,CAAA,CACrB,KAAM,EAAA;AAET,EAAM,MAAA,IAAA,GAAO,UAAU,OAAQ,EAAA;AAC/B,EAAM,MAAA,IAAA,GAAO,SAAU,CAAA,aAAA,CAAc,IAAI,CAAA;AACzC,EAAA,MAAM,UAAa,GAAA,CAAA,QAAA,EAAW,IAAI,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA;AAE1C,EAAM,MAAA,IAAA,GAAO,MAAM,sBAAA,CAAuB,UAAU,CAAA;AAEpD,EAAO,OAAA;AAAA,IACL,KAAO,EAAA,OAAA;AAAA,IACP,UAAA;AAAA,IACA,IAAA;AAAA,IACA,MAAM,YAAY;AAChB,MAAA,MAAM,KAAK,UAAW,EAAA;AACtB,MAAA,MAAM,SAAU,CAAA,IAAA,CAAK,EAAE,OAAA,EAAS,KAAQ,CAAA;AAAA;AAC1C,GACF;AACF;;;;;"}