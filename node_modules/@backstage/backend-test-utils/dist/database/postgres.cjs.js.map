{"version":3,"file":"postgres.cjs.js","sources":["../../src/database/postgres.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { randomBytes } from 'crypto';\nimport knexFactory, { Knex } from 'knex';\nimport { parse as parsePgConnectionString } from 'pg-connection-string';\nimport { v4 as uuid } from 'uuid';\nimport { Engine, LARGER_POOL_CONFIG, TestDatabaseProperties } from './types';\n\nasync function waitForPostgresReady(\n  connection: Knex.PgConnectionConfig,\n): Promise<void> {\n  const startTime = Date.now();\n\n  let lastError: Error | undefined;\n  let attempts = 0;\n  for (;;) {\n    attempts += 1;\n\n    let knex: Knex | undefined;\n    try {\n      knex = knexFactory({\n        client: 'pg',\n        connection: {\n          // make a copy because the driver mutates this\n          ...connection,\n        },\n      });\n      const result = await knex.select(knex.raw('version()'));\n      if (Array.isArray(result) && result[0]?.version) {\n        return;\n      }\n    } catch (e) {\n      lastError = e;\n    } finally {\n      await knex?.destroy();\n    }\n\n    if (Date.now() - startTime > 30_000) {\n      throw new Error(\n        `Timed out waiting for the database to be ready for connections, ${attempts} attempts, ${\n          lastError\n            ? `last error was ${stringifyError(lastError)}`\n            : '(no errors thrown)'\n        }`,\n      );\n    }\n\n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n}\n\nexport async function startPostgresContainer(image: string): Promise<{\n  connection: Knex.PgConnectionConfig;\n  stopContainer: () => Promise<void>;\n}> {\n  const user = 'postgres';\n  const password = uuid();\n\n  // Lazy-load to avoid side-effect of importing testcontainers\n  const { GenericContainer } =\n    require('testcontainers') as typeof import('testcontainers');\n\n  const container = await new GenericContainer(image)\n    .withExposedPorts(5432)\n    .withEnvironment({ POSTGRES_PASSWORD: password })\n    .withTmpFs({ '/var/lib/postgresql/data': 'rw' })\n    .start();\n\n  const host = container.getHost();\n  const port = container.getMappedPort(5432);\n  const connection = { host, port, user, password };\n  const stopContainer = async () => {\n    await container.stop({ timeout: 10_000 });\n  };\n\n  await waitForPostgresReady(connection);\n\n  return { connection, stopContainer };\n}\n\nexport class PostgresEngine implements Engine {\n  static async create(\n    properties: TestDatabaseProperties,\n  ): Promise<PostgresEngine> {\n    const { connectionStringEnvironmentVariableName, dockerImageName } =\n      properties;\n\n    if (connectionStringEnvironmentVariableName) {\n      const connectionString =\n        process.env[connectionStringEnvironmentVariableName];\n      if (connectionString) {\n        const connection = parsePgConnectionString(connectionString);\n        return new PostgresEngine(\n          properties,\n          connection as Knex.PgConnectionConfig,\n        );\n      }\n    }\n\n    if (dockerImageName) {\n      const { connection, stopContainer } = await startPostgresContainer(\n        dockerImageName,\n      );\n      return new PostgresEngine(properties, connection, stopContainer);\n    }\n\n    throw new Error(`Test databasee for ${properties.name} not configured`);\n  }\n\n  readonly #properties: TestDatabaseProperties;\n  readonly #connection: Knex.PgConnectionConfig;\n  readonly #knexInstances: Knex[];\n  readonly #databaseNames: string[];\n  readonly #stopContainer?: () => Promise<void>;\n\n  constructor(\n    properties: TestDatabaseProperties,\n    connection: Knex.PgConnectionConfig,\n    stopContainer?: () => Promise<void>,\n  ) {\n    this.#properties = properties;\n    this.#connection = connection;\n    this.#knexInstances = [];\n    this.#databaseNames = [];\n    this.#stopContainer = stopContainer;\n  }\n\n  async createDatabaseInstance(): Promise<Knex> {\n    const adminConnection = this.#connectAdmin();\n    try {\n      const databaseName = `db${randomBytes(16).toString('hex')}`;\n\n      await adminConnection.raw('CREATE DATABASE ??', [databaseName]);\n      this.#databaseNames.push(databaseName);\n\n      const knexInstance = knexFactory({\n        client: this.#properties.driver,\n        connection: {\n          ...this.#connection,\n          database: databaseName,\n        },\n        ...LARGER_POOL_CONFIG,\n      });\n      this.#knexInstances.push(knexInstance);\n\n      return knexInstance;\n    } finally {\n      await adminConnection.destroy();\n    }\n  }\n\n  async shutdown(): Promise<void> {\n    for (const instance of this.#knexInstances) {\n      await instance.destroy();\n    }\n\n    const adminConnection = this.#connectAdmin();\n    try {\n      for (const databaseName of this.#databaseNames) {\n        await adminConnection.raw('DROP DATABASE ??', [databaseName]);\n      }\n    } finally {\n      await adminConnection.destroy();\n    }\n\n    await this.#stopContainer?.();\n  }\n\n  #connectAdmin(): Knex {\n    return knexFactory({\n      client: this.#properties.driver,\n      connection: {\n        ...this.#connection,\n        database: 'postgres',\n      },\n      pool: {\n        acquireTimeoutMillis: 10000,\n      },\n    });\n  }\n}\n"],"names":["knexFactory","stringifyError","uuid","parsePgConnectionString","randomBytes","LARGER_POOL_CONFIG"],"mappings":";;;;;;;;;;;;;AAuBA,eAAe,qBACb,UACe,EAAA;AACf,EAAM,MAAA,SAAA,GAAY,KAAK,GAAI,EAAA;AAE3B,EAAI,IAAA,SAAA;AACJ,EAAA,IAAI,QAAW,GAAA,CAAA;AACf,EAAS,WAAA;AACP,IAAY,QAAA,IAAA,CAAA;AAEZ,IAAI,IAAA,IAAA;AACJ,IAAI,IAAA;AACF,MAAA,IAAA,GAAOA,4BAAY,CAAA;AAAA,QACjB,MAAQ,EAAA,IAAA;AAAA,QACR,UAAY,EAAA;AAAA;AAAA,UAEV,GAAG;AAAA;AACL,OACD,CAAA;AACD,MAAA,MAAM,SAAS,MAAM,IAAA,CAAK,OAAO,IAAK,CAAA,GAAA,CAAI,WAAW,CAAC,CAAA;AACtD,MAAA,IAAI,MAAM,OAAQ,CAAA,MAAM,KAAK,MAAO,CAAA,CAAC,GAAG,OAAS,EAAA;AAC/C,QAAA;AAAA;AACF,aACO,CAAG,EAAA;AACV,MAAY,SAAA,GAAA,CAAA;AAAA,KACZ,SAAA;AACA,MAAA,MAAM,MAAM,OAAQ,EAAA;AAAA;AAGtB,IAAA,IAAI,IAAK,CAAA,GAAA,EAAQ,GAAA,SAAA,GAAY,GAAQ,EAAA;AACnC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gEAAA,EAAmE,QAAQ,CACzE,WAAA,EAAA,SAAA,GACI,kBAAkBC,qBAAe,CAAA,SAAS,CAAC,CAAA,CAAA,GAC3C,oBACN,CAAA;AAAA,OACF;AAAA;AAGF,IAAA,MAAM,IAAI,OAAQ,CAAA,CAAA,OAAA,KAAW,UAAW,CAAA,OAAA,EAAS,GAAG,CAAC,CAAA;AAAA;AAEzD;AAEA,eAAsB,uBAAuB,KAG1C,EAAA;AACD,EAAA,MAAM,IAAO,GAAA,UAAA;AACb,EAAA,MAAM,WAAWC,OAAK,EAAA;AAGtB,EAAA,MAAM,EAAE,gBAAA,EACN,GAAA,OAAA,CAAQ,gBAAgB,CAAA;AAE1B,EAAM,MAAA,SAAA,GAAY,MAAM,IAAI,gBAAA,CAAiB,KAAK,CAC/C,CAAA,gBAAA,CAAiB,IAAI,CACrB,CAAA,eAAA,CAAgB,EAAE,iBAAmB,EAAA,QAAA,EAAU,CAC/C,CAAA,SAAA,CAAU,EAAE,0BAA4B,EAAA,IAAA,EAAM,CAAA,CAC9C,KAAM,EAAA;AAET,EAAM,MAAA,IAAA,GAAO,UAAU,OAAQ,EAAA;AAC/B,EAAM,MAAA,IAAA,GAAO,SAAU,CAAA,aAAA,CAAc,IAAI,CAAA;AACzC,EAAA,MAAM,UAAa,GAAA,EAAE,IAAM,EAAA,IAAA,EAAM,MAAM,QAAS,EAAA;AAChD,EAAA,MAAM,gBAAgB,YAAY;AAChC,IAAA,MAAM,SAAU,CAAA,IAAA,CAAK,EAAE,OAAA,EAAS,KAAQ,CAAA;AAAA,GAC1C;AAEA,EAAA,MAAM,qBAAqB,UAAU,CAAA;AAErC,EAAO,OAAA,EAAE,YAAY,aAAc,EAAA;AACrC;AAEO,MAAM,cAAiC,CAAA;AAAA,EAC5C,aAAa,OACX,UACyB,EAAA;AACzB,IAAM,MAAA,EAAE,uCAAyC,EAAA,eAAA,EAC/C,GAAA,UAAA;AAEF,IAAA,IAAI,uCAAyC,EAAA;AAC3C,MAAM,MAAA,gBAAA,GACJ,OAAQ,CAAA,GAAA,CAAI,uCAAuC,CAAA;AACrD,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAM,MAAA,UAAA,GAAaC,yBAAwB,gBAAgB,CAAA;AAC3D,QAAA,OAAO,IAAI,cAAA;AAAA,UACT,UAAA;AAAA,UACA;AAAA,SACF;AAAA;AACF;AAGF,IAAA,IAAI,eAAiB,EAAA;AACnB,MAAA,MAAM,EAAE,UAAA,EAAY,aAAc,EAAA,GAAI,MAAM,sBAAA;AAAA,QAC1C;AAAA,OACF;AACA,MAAA,OAAO,IAAI,cAAA,CAAe,UAAY,EAAA,UAAA,EAAY,aAAa,CAAA;AAAA;AAGjE,IAAA,MAAM,IAAI,KAAA,CAAM,CAAsB,mBAAA,EAAA,UAAA,CAAW,IAAI,CAAiB,eAAA,CAAA,CAAA;AAAA;AACxE,EAES,WAAA;AAAA,EACA,WAAA;AAAA,EACA,cAAA;AAAA,EACA,cAAA;AAAA,EACA,cAAA;AAAA,EAET,WAAA,CACE,UACA,EAAA,UAAA,EACA,aACA,EAAA;AACA,IAAA,IAAA,CAAK,WAAc,GAAA,UAAA;AACnB,IAAA,IAAA,CAAK,WAAc,GAAA,UAAA;AACnB,IAAA,IAAA,CAAK,iBAAiB,EAAC;AACvB,IAAA,IAAA,CAAK,iBAAiB,EAAC;AACvB,IAAA,IAAA,CAAK,cAAiB,GAAA,aAAA;AAAA;AACxB,EAEA,MAAM,sBAAwC,GAAA;AAC5C,IAAM,MAAA,eAAA,GAAkB,KAAK,aAAc,EAAA;AAC3C,IAAI,IAAA;AACF,MAAA,MAAM,eAAe,CAAK,EAAA,EAAAC,kBAAA,CAAY,EAAE,CAAE,CAAA,QAAA,CAAS,KAAK,CAAC,CAAA,CAAA;AAEzD,MAAA,MAAM,eAAgB,CAAA,GAAA,CAAI,oBAAsB,EAAA,CAAC,YAAY,CAAC,CAAA;AAC9D,MAAK,IAAA,CAAA,cAAA,CAAe,KAAK,YAAY,CAAA;AAErC,MAAA,MAAM,eAAeJ,4BAAY,CAAA;AAAA,QAC/B,MAAA,EAAQ,KAAK,WAAY,CAAA,MAAA;AAAA,QACzB,UAAY,EAAA;AAAA,UACV,GAAG,IAAK,CAAA,WAAA;AAAA,UACR,QAAU,EAAA;AAAA,SACZ;AAAA,QACA,GAAGK;AAAA,OACJ,CAAA;AACD,MAAK,IAAA,CAAA,cAAA,CAAe,KAAK,YAAY,CAAA;AAErC,MAAO,OAAA,YAAA;AAAA,KACP,SAAA;AACA,MAAA,MAAM,gBAAgB,OAAQ,EAAA;AAAA;AAChC;AACF,EAEA,MAAM,QAA0B,GAAA;AAC9B,IAAW,KAAA,MAAA,QAAA,IAAY,KAAK,cAAgB,EAAA;AAC1C,MAAA,MAAM,SAAS,OAAQ,EAAA;AAAA;AAGzB,IAAM,MAAA,eAAA,GAAkB,KAAK,aAAc,EAAA;AAC3C,IAAI,IAAA;AACF,MAAW,KAAA,MAAA,YAAA,IAAgB,KAAK,cAAgB,EAAA;AAC9C,QAAA,MAAM,eAAgB,CAAA,GAAA,CAAI,kBAAoB,EAAA,CAAC,YAAY,CAAC,CAAA;AAAA;AAC9D,KACA,SAAA;AACA,MAAA,MAAM,gBAAgB,OAAQ,EAAA;AAAA;AAGhC,IAAA,MAAM,KAAK,cAAiB,IAAA;AAAA;AAC9B,EAEA,aAAsB,GAAA;AACpB,IAAA,OAAOL,4BAAY,CAAA;AAAA,MACjB,MAAA,EAAQ,KAAK,WAAY,CAAA,MAAA;AAAA,MACzB,UAAY,EAAA;AAAA,QACV,GAAG,IAAK,CAAA,WAAA;AAAA,QACR,QAAU,EAAA;AAAA,OACZ;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,oBAAsB,EAAA;AAAA;AACxB,KACD,CAAA;AAAA;AAEL;;;;;"}