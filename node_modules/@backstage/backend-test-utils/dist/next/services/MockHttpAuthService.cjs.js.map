{"version":3,"file":"MockHttpAuthService.cjs.js","sources":["../../../src/next/services/MockHttpAuthService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstagePrincipalTypes,\n  BackstageUserPrincipal,\n  HttpAuthService,\n} from '@backstage/backend-plugin-api';\nimport { Request, Response } from 'express';\nimport { parse as parseCookie } from 'cookie';\nimport { MockAuthService } from './MockAuthService';\nimport { AuthenticationError, NotAllowedError } from '@backstage/errors';\nimport {\n  MOCK_NONE_TOKEN,\n  MOCK_AUTH_COOKIE,\n  mockCredentials,\n} from './mockCredentials';\n\n// TODO: support mock cookie auth?\nexport class MockHttpAuthService implements HttpAuthService {\n  #auth: AuthService;\n  #defaultCredentials: BackstageCredentials;\n\n  constructor(pluginId: string, defaultCredentials: BackstageCredentials) {\n    this.#auth = new MockAuthService({\n      pluginId,\n      disableDefaultAuthPolicy: false,\n    });\n    this.#defaultCredentials = defaultCredentials;\n  }\n\n  async #getCredentials(req: Request, allowLimitedAccess: boolean) {\n    const header = req.headers.authorization;\n    const token =\n      typeof header === 'string'\n        ? header.match(/^Bearer[ ]+(\\S+)$/i)?.[1]\n        : undefined;\n\n    if (token) {\n      if (token === MOCK_NONE_TOKEN) {\n        return this.#auth.getNoneCredentials();\n      }\n\n      return await this.#auth.authenticate(token, {\n        allowLimitedAccess,\n      });\n    }\n\n    if (allowLimitedAccess) {\n      const cookieHeader = req.headers.cookie;\n\n      if (cookieHeader) {\n        const cookies = parseCookie(cookieHeader);\n        const cookie = cookies[MOCK_AUTH_COOKIE];\n\n        if (cookie) {\n          return await this.#auth.authenticate(cookie, {\n            allowLimitedAccess: true,\n          });\n        }\n      }\n    }\n\n    return this.#defaultCredentials;\n  }\n\n  async credentials<TAllowed extends keyof BackstagePrincipalTypes = 'unknown'>(\n    req: Request,\n    options?: {\n      allow?: Array<TAllowed>;\n      allowLimitedAccess?: boolean;\n    },\n  ): Promise<BackstageCredentials<BackstagePrincipalTypes[TAllowed]>> {\n    const credentials = await this.#getCredentials(\n      req,\n      options?.allowLimitedAccess ?? false,\n    );\n\n    const allowedPrincipalTypes = options?.allow;\n    if (!allowedPrincipalTypes) {\n      return credentials as any;\n    }\n\n    if (this.#auth.isPrincipal(credentials, 'none')) {\n      if (allowedPrincipalTypes.includes('none' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new AuthenticationError('Missing credentials');\n    } else if (this.#auth.isPrincipal(credentials, 'user')) {\n      if (allowedPrincipalTypes.includes('user' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'user' credentials`,\n      );\n    } else if (this.#auth.isPrincipal(credentials, 'service')) {\n      if (allowedPrincipalTypes.includes('service' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'service' credentials`,\n      );\n    }\n\n    throw new NotAllowedError(\n      'Unknown principal type, this should never happen',\n    );\n  }\n\n  async issueUserCookie(\n    res: Response,\n    options?: { credentials?: BackstageCredentials<BackstageUserPrincipal> },\n  ): Promise<{ expiresAt: Date }> {\n    const credentials =\n      options?.credentials ??\n      (await this.credentials(res.req, { allow: ['user'] }));\n\n    res.setHeader(\n      'Set-Cookie',\n      mockCredentials.limitedUser.cookie(credentials.principal.userEntityRef),\n    );\n\n    return { expiresAt: new Date(Date.now() + 3600_000) };\n  }\n}\n"],"names":["MockAuthService","MOCK_NONE_TOKEN","parseCookie","cookie","MOCK_AUTH_COOKIE","AuthenticationError","NotAllowedError","mockCredentials"],"mappings":"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"}