{"version":3,"file":"mockServices.cjs.js","sources":["../../../src/next/services/mockServices.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { cacheServiceFactory } from '@backstage/backend-defaults/cache';\nimport { databaseServiceFactory } from '@backstage/backend-defaults/database';\nimport { HostDiscovery } from '@backstage/backend-defaults/discovery';\nimport { httpRouterServiceFactory } from '@backstage/backend-defaults/httpRouter';\nimport { lifecycleServiceFactory } from '@backstage/backend-defaults/lifecycle';\nimport { loggerServiceFactory } from '@backstage/backend-defaults/logger';\nimport { permissionsServiceFactory } from '@backstage/backend-defaults/permissions';\nimport { permissionsRegistryServiceFactory } from '@backstage/backend-defaults/permissionsRegistry';\nimport { rootHealthServiceFactory } from '@backstage/backend-defaults/rootHealth';\nimport { rootHttpRouterServiceFactory } from '@backstage/backend-defaults/rootHttpRouter';\nimport { rootLifecycleServiceFactory } from '@backstage/backend-defaults/rootLifecycle';\nimport { schedulerServiceFactory } from '@backstage/backend-defaults/scheduler';\nimport { urlReaderServiceFactory } from '@backstage/backend-defaults/urlReader';\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstageUserInfo,\n  DatabaseService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  RootConfigService,\n  ServiceFactory,\n  ServiceRef,\n  UserInfoService,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { ConfigReader } from '@backstage/config';\nimport {\n  eventsServiceFactory,\n  eventsServiceRef,\n} from '@backstage/plugin-events-node';\nimport { JsonObject } from '@backstage/types';\nimport { Knex } from 'knex';\nimport { MockAuthService } from './MockAuthService';\nimport { MockHttpAuthService } from './MockHttpAuthService';\nimport { MockRootLoggerService } from './MockRootLoggerService';\nimport { MockUserInfoService } from './MockUserInfoService';\nimport { mockCredentials } from './mockCredentials';\nimport { auditorServiceFactory } from '@backstage/backend-defaults/auditor';\n\n/** @internal */\nfunction createLoggerMock() {\n  return {\n    child: jest.fn().mockImplementation(createLoggerMock),\n    debug: jest.fn(),\n    error: jest.fn(),\n    info: jest.fn(),\n    warn: jest.fn(),\n  };\n}\n\n/** @internal */\nfunction simpleFactoryWithOptions<\n  TService,\n  TScope extends 'root' | 'plugin',\n  TOptions extends [options?: object] = [],\n>(\n  ref: ServiceRef<TService, TScope>,\n  factory: (...options: TOptions) => TService,\n): (...options: TOptions) => ServiceFactory<TService, TScope> {\n  const factoryWithOptions = (...options: TOptions) =>\n    createServiceFactory({\n      service: ref as ServiceRef<TService, any>,\n      deps: {},\n      async factory() {\n        return factory(...options);\n      },\n    });\n  return Object.assign(\n    factoryWithOptions,\n    factoryWithOptions(...([undefined] as unknown as TOptions)),\n  ) as ServiceFactory<TService, TScope> &\n    ((...options: TOptions) => ServiceFactory<TService, TScope>);\n}\n\n/** @public */\nexport type ServiceMock<TService> = {\n  factory: ServiceFactory<TService>;\n} & {\n  [Key in keyof TService]: TService[Key] extends (\n    ...args: infer Args\n  ) => infer Return\n    ? TService[Key] & jest.MockInstance<Return, Args>\n    : TService[Key];\n};\n\n/** @internal */\nfunction simpleMock<TService>(\n  ref: ServiceRef<TService, any>,\n  mockFactory: () => jest.Mocked<TService>,\n): (partialImpl?: Partial<TService>) => ServiceMock<TService> {\n  return partialImpl => {\n    const mock = mockFactory();\n    if (partialImpl) {\n      for (const [key, impl] of Object.entries(partialImpl)) {\n        if (typeof impl === 'function') {\n          (mock as any)[key].mockImplementation(impl);\n        } else {\n          (mock as any)[key] = impl;\n        }\n      }\n    }\n    return Object.assign(mock, {\n      factory: createServiceFactory({\n        service: ref,\n        deps: {},\n        factory: () => mock,\n      }),\n    }) as ServiceMock<TService>;\n  };\n}\n\n/**\n * Mock implementations of the core services, to be used in tests.\n *\n * @public\n * @remarks\n *\n * There are some variations among the services depending on what needs tests\n * might have, but overall there are three main usage patterns:\n *\n * 1. Creating an actual fake service instance, often with a simplified version\n * of functionality, by calling the mock service itself as a function.\n *\n * ```ts\n * // The function often accepts parameters that control its behavior\n * const foo = mockServices.foo();\n * ```\n *\n * 2. Creating a mock service, where all methods are replaced with jest mocks, by\n * calling the service's `mock` function.\n *\n * ```ts\n * // You can optionally supply a subset of its methods to implement\n * const foo = mockServices.foo.mock({\n *   someMethod: () => 'mocked result',\n * });\n * // After exercising your test, you can make assertions on the mock:\n * expect(foo.someMethod).toHaveBeenCalledTimes(2);\n * expect(foo.otherMethod).toHaveBeenCalledWith(testData);\n * ```\n *\n * 3. Creating a service factory that behaves similarly to the mock as per above.\n *\n * ```ts\n * await startTestBackend({\n *   features: [\n *     mockServices.foo.factory({\n *       someMethod: () => 'mocked result',\n *     })\n *   ],\n * });\n * ```\n */\nexport namespace mockServices {\n  export function rootConfig(options?: rootConfig.Options): RootConfigService {\n    return new ConfigReader(options?.data, 'mock-config');\n  }\n  export namespace rootConfig {\n    export type Options = { data?: JsonObject };\n\n    export const factory = simpleFactoryWithOptions(\n      coreServices.rootConfig,\n      rootConfig,\n    );\n    export const mock = simpleMock(coreServices.rootConfig, () => ({\n      get: jest.fn(),\n      getBoolean: jest.fn(),\n      getConfig: jest.fn(),\n      getConfigArray: jest.fn(),\n      getNumber: jest.fn(),\n      getOptional: jest.fn(),\n      getOptionalBoolean: jest.fn(),\n      getOptionalConfig: jest.fn(),\n      getOptionalConfigArray: jest.fn(),\n      getOptionalNumber: jest.fn(),\n      getOptionalString: jest.fn(),\n      getOptionalStringArray: jest.fn(),\n      getString: jest.fn(),\n      getStringArray: jest.fn(),\n      has: jest.fn(),\n      keys: jest.fn(),\n    }));\n  }\n\n  export function rootLogger(options?: rootLogger.Options): LoggerService {\n    return MockRootLoggerService.create(options);\n  }\n  export namespace rootLogger {\n    export type Options = {\n      level?: 'none' | 'error' | 'warn' | 'info' | 'debug';\n    };\n\n    export const factory = simpleFactoryWithOptions(\n      coreServices.rootLogger,\n      rootLogger,\n    );\n    export const mock = simpleMock(coreServices.rootLogger, () => ({\n      child: jest.fn(),\n      debug: jest.fn(),\n      error: jest.fn(),\n      info: jest.fn(),\n      warn: jest.fn(),\n    }));\n  }\n\n  export namespace auditor {\n    export const factory = () => auditorServiceFactory;\n\n    export const mock = simpleMock(coreServices.auditor, () => ({\n      createEvent: jest.fn(async _ => {\n        return {\n          success: jest.fn(),\n          fail: jest.fn(),\n        };\n      }),\n    }));\n  }\n\n  export function auth(options?: {\n    pluginId?: string;\n    disableDefaultAuthPolicy?: boolean;\n  }): AuthService {\n    return new MockAuthService({\n      pluginId: options?.pluginId ?? 'test',\n      disableDefaultAuthPolicy: Boolean(options?.disableDefaultAuthPolicy),\n    });\n  }\n  export namespace auth {\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.auth,\n        deps: {\n          plugin: coreServices.pluginMetadata,\n          config: coreServices.rootConfig,\n        },\n        factory({ plugin, config }) {\n          const disableDefaultAuthPolicy = Boolean(\n            config.getOptionalBoolean(\n              'backend.auth.dangerouslyDisableDefaultAuthPolicy',\n            ),\n          );\n          return new MockAuthService({\n            pluginId: plugin.getId(),\n            disableDefaultAuthPolicy,\n          });\n        },\n      });\n    export const mock = simpleMock(coreServices.auth, () => ({\n      authenticate: jest.fn(),\n      getNoneCredentials: jest.fn(),\n      getOwnServiceCredentials: jest.fn(),\n      isPrincipal: jest.fn() as any,\n      getPluginRequestToken: jest.fn(),\n      getLimitedUserToken: jest.fn(),\n      listPublicServiceKeys: jest.fn(),\n    }));\n  }\n\n  export function discovery(): DiscoveryService {\n    return HostDiscovery.fromConfig(\n      new ConfigReader({\n        backend: {\n          // Invalid port to make sure that requests are always mocked\n          baseUrl: 'http://localhost:0',\n          listen: { port: 0 },\n        },\n      }),\n    );\n  }\n  export namespace discovery {\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.discovery,\n        deps: {},\n        factory: () => discovery(),\n      });\n    export const mock = simpleMock(coreServices.discovery, () => ({\n      getBaseUrl: jest.fn(),\n      getExternalBaseUrl: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the `HttpAuthService`.\n   *\n   * By default all requests without credentials are treated as requests from\n   * the default mock user principal. This behavior can be configured with the\n   * `defaultCredentials` option.\n   */\n  export function httpAuth(options?: {\n    pluginId?: string;\n    /**\n     * The default credentials to use if there are no credentials present in the\n     * incoming request.\n     *\n     * By default all requests without credentials are treated as authenticated\n     * as the default mock user as returned from `mockCredentials.user()`.\n     */\n    defaultCredentials?: BackstageCredentials;\n  }): HttpAuthService {\n    return new MockHttpAuthService(\n      options?.pluginId ?? 'test',\n      options?.defaultCredentials ?? mockCredentials.user(),\n    );\n  }\n  export namespace httpAuth {\n    /**\n     * Creates a mock service factory for the `HttpAuthService`.\n     *\n     * By default all requests without credentials are treated as requests from\n     * the default mock user principal. This behavior can be configured with the\n     * `defaultCredentials` option.\n     */\n    export const factory = (options?: {\n      defaultCredentials?: BackstageCredentials;\n    }) =>\n      createServiceFactory({\n        service: coreServices.httpAuth,\n        deps: { plugin: coreServices.pluginMetadata },\n        factory: ({ plugin }) =>\n          new MockHttpAuthService(\n            plugin.getId(),\n            options?.defaultCredentials ?? mockCredentials.user(),\n          ),\n      });\n    export const mock = simpleMock(coreServices.httpAuth, () => ({\n      credentials: jest.fn(),\n      issueUserCookie: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the `UserInfoService`.\n   *\n   * By default it extracts the user's entity ref from a user principal and\n   * returns that as the only ownership entity ref, but this can be overridden\n   * by passing in a custom set of user info.\n   */\n  export function userInfo(\n    customInfo?: Partial<BackstageUserInfo>,\n  ): UserInfoService {\n    return new MockUserInfoService(customInfo);\n  }\n  export namespace userInfo {\n    /**\n     * Creates a mock service factory for the `UserInfoService`.\n     *\n     * By default it extracts the user's entity ref from a user principal and\n     * returns that as the only ownership entity ref.\n     */\n    export const factory = () =>\n      createServiceFactory({\n        service: coreServices.userInfo,\n        deps: {},\n        factory() {\n          return new MockUserInfoService();\n        },\n      });\n    export const mock = simpleMock(coreServices.userInfo, () => ({\n      getUserInfo: jest.fn(),\n    }));\n  }\n\n  // TODO(Rugvip): Not all core services have implementations available here yet.\n  //               some may need a bit more refactoring for it to be simpler to\n  //               re-implement functioning mock versions here.\n  export namespace cache {\n    export const factory = () => cacheServiceFactory;\n    export const mock = simpleMock(coreServices.cache, () => ({\n      delete: jest.fn(),\n      get: jest.fn(),\n      set: jest.fn(),\n      withOptions: jest.fn(),\n    }));\n  }\n\n  /**\n   * Creates a mock implementation of the\n   * {@link @backstage/backend-plugin-api#coreServices.database}. Just returns\n   * the given `knex` instance, which is useful in combination with the\n   * {@link TestDatabases} facility.\n   */\n  export function database(options: {\n    knex: Knex;\n    migrations?: { skip?: boolean };\n  }): DatabaseService {\n    return {\n      getClient: async () => options.knex,\n      migrations: options.migrations,\n    };\n  }\n  export namespace database {\n    /**\n     * Creates a mock factory for the\n     * {@link @backstage/backend-plugin-api#coreServices.database}. Just returns\n     * the given `knex` instance if you supply one, which is useful in\n     * combination with the {@link TestDatabases} facility. Otherwise, it\n     * returns the regular default database factory which reads config settings.\n     */\n    export const factory = (options?: {\n      knex: Knex;\n      migrations?: { skip?: boolean };\n    }) =>\n      options\n        ? createServiceFactory({\n            service: coreServices.database,\n            deps: {},\n            factory: () => database(options),\n          })\n        : databaseServiceFactory;\n    /**\n     * Creates a mock of the\n     * {@link @backstage/backend-plugin-api#coreServices.database}, optionally\n     * with some given method implementations.\n     */\n    export const mock = simpleMock(coreServices.database, () => ({\n      getClient: jest.fn(),\n    }));\n  }\n\n  export namespace rootHealth {\n    export const factory = () => rootHealthServiceFactory;\n    export const mock = simpleMock(coreServices.rootHealth, () => ({\n      getLiveness: jest.fn(),\n      getReadiness: jest.fn(),\n    }));\n  }\n\n  export namespace httpRouter {\n    export const factory = () => httpRouterServiceFactory;\n    export const mock = simpleMock(coreServices.httpRouter, () => ({\n      use: jest.fn(),\n      addAuthPolicy: jest.fn(),\n    }));\n  }\n\n  export namespace rootHttpRouter {\n    export const factory = () => rootHttpRouterServiceFactory();\n    export const mock = simpleMock(coreServices.rootHttpRouter, () => ({\n      use: jest.fn(),\n    }));\n  }\n\n  export namespace lifecycle {\n    export const factory = () => lifecycleServiceFactory;\n    export const mock = simpleMock(coreServices.lifecycle, () => ({\n      addShutdownHook: jest.fn(),\n      addStartupHook: jest.fn(),\n    }));\n  }\n\n  export namespace logger {\n    export const factory = () => loggerServiceFactory;\n    export const mock = simpleMock(coreServices.logger, () =>\n      createLoggerMock(),\n    );\n  }\n\n  export namespace permissions {\n    export const factory = () => permissionsServiceFactory;\n    export const mock = simpleMock(coreServices.permissions, () => ({\n      authorize: jest.fn(),\n      authorizeConditional: jest.fn(),\n    }));\n  }\n\n  export namespace permissionsRegistry {\n    export const factory = () => permissionsRegistryServiceFactory;\n    export const mock = simpleMock(coreServices.permissionsRegistry, () => ({\n      addPermissionRules: jest.fn(),\n      addPermissions: jest.fn(),\n      addResourceType: jest.fn(),\n      getPermissionRuleset: jest.fn(),\n    }));\n  }\n\n  export namespace rootLifecycle {\n    export const factory = () => rootLifecycleServiceFactory;\n    export const mock = simpleMock(coreServices.rootLifecycle, () => ({\n      addShutdownHook: jest.fn(),\n      addBeforeShutdownHook: jest.fn(),\n      addStartupHook: jest.fn(),\n    }));\n  }\n\n  export namespace scheduler {\n    export const factory = () => schedulerServiceFactory;\n    export const mock = simpleMock(coreServices.scheduler, () => ({\n      createScheduledTaskRunner: jest.fn(),\n      getScheduledTasks: jest.fn(),\n      scheduleTask: jest.fn(),\n      triggerTask: jest.fn(),\n    }));\n  }\n\n  export namespace urlReader {\n    export const factory = () => urlReaderServiceFactory;\n    export const mock = simpleMock(coreServices.urlReader, () => ({\n      readTree: jest.fn(),\n      readUrl: jest.fn(),\n      search: jest.fn(),\n    }));\n  }\n\n  export namespace events {\n    export const factory = () => eventsServiceFactory;\n    export const mock = simpleMock(eventsServiceRef, () => ({\n      publish: jest.fn(),\n      subscribe: jest.fn(),\n    }));\n  }\n}\n"],"names":["createServiceFactory","mockServices","ConfigReader","rootConfig","coreServices","MockRootLoggerService","rootLogger","auditor","auditorServiceFactory","MockAuthService","auth","discovery","HostDiscovery","MockHttpAuthService","mockCredentials","httpAuth","MockUserInfoService","userInfo","cache","cacheServiceFactory","database","databaseServiceFactory","rootHealth","rootHealthServiceFactory","httpRouter","httpRouterServiceFactory","rootHttpRouter","rootHttpRouterServiceFactory","lifecycle","lifecycleServiceFactory","logger","loggerServiceFactory","permissions","permissionsServiceFactory","permissionsRegistry","permissionsRegistryServiceFactory","rootLifecycle","rootLifecycleServiceFactory","scheduler","schedulerServiceFactory","urlReader","urlReaderServiceFactory","events","eventsServiceFactory","eventsServiceRef"],"mappings":"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"}