{"version":3,"file":"TestBackend.cjs.js","sources":["../../../src/next/wiring/TestBackend.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Backend, createSpecializedBackend } from '@backstage/backend-app-api';\nimport {\n  createServiceFactory,\n  BackendFeature,\n  ExtensionPoint,\n  coreServices,\n  createBackendModule,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { mockServices } from '../services';\nimport { ConfigReader } from '@backstage/config';\nimport express from 'express';\n// Direct internal import to avoid duplication\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  InternalBackendFeature,\n  InternalBackendRegistrations,\n} from '../../../../backend-plugin-api/src/wiring/types';\nimport {\n  DefaultRootHttpRouter,\n  ExtendedHttpServer,\n  MiddlewareFactory,\n  createHealthRouter,\n  createHttpServer,\n} from '@backstage/backend-defaults/rootHttpRouter';\nimport { HostDiscovery } from '@backstage/backend-defaults/discovery';\n\n/** @public */\nexport interface TestBackendOptions<TExtensionPoints extends any[]> {\n  extensionPoints?: readonly [\n    ...{\n      [index in keyof TExtensionPoints]: [\n        ExtensionPoint<TExtensionPoints[index]>,\n        Partial<TExtensionPoints[index]>,\n      ];\n    },\n  ];\n  features?: Array<BackendFeature | Promise<{ default: BackendFeature }>>;\n}\n\n/** @public */\nexport interface TestBackend extends Backend {\n  /**\n   * Provides access to the underling HTTP server for use with utilities\n   * such as `supertest`.\n   *\n   * If the root http router service has been replaced, this will throw an error.\n   */\n  readonly server: ExtendedHttpServer;\n}\n\nexport const defaultServiceFactories = [\n  mockServices.auth.factory(),\n  mockServices.auditor.factory(),\n  mockServices.cache.factory(),\n  mockServices.rootConfig.factory(),\n  mockServices.database.factory(),\n  mockServices.httpAuth.factory(),\n  mockServices.httpRouter.factory(),\n  mockServices.lifecycle.factory(),\n  mockServices.logger.factory(),\n  mockServices.permissions.factory(),\n  mockServices.permissionsRegistry.factory(),\n  mockServices.rootHealth.factory(),\n  mockServices.rootLifecycle.factory(),\n  mockServices.rootLogger.factory(),\n  mockServices.scheduler.factory(),\n  mockServices.userInfo.factory(),\n  mockServices.urlReader.factory(),\n  mockServices.events.factory(),\n];\n\n/**\n * Given a set of features, return an array of plugins that ensures that each\n * module in the provided set of features has a corresponding plugin.\n * @internal\n */\nfunction createPluginsForOrphanModules(features: Array<BackendFeature>) {\n  const pluginIds = new Set<string>();\n  const modulePluginIds = new Set<string>();\n\n  for (const feature of features) {\n    if (isInternalBackendRegistrations(feature)) {\n      const registrations = feature.getRegistrations();\n      for (const registration of registrations) {\n        if (registration.type === 'plugin') {\n          pluginIds.add(registration.pluginId);\n        } else if (registration.type === 'module') {\n          modulePluginIds.add(registration.pluginId);\n        }\n      }\n    }\n  }\n\n  for (const pluginId of pluginIds) {\n    modulePluginIds.delete(pluginId);\n  }\n\n  return Array.from(modulePluginIds).map(pluginId =>\n    createBackendPlugin({\n      pluginId,\n      register(reg) {\n        reg.registerInit({ deps: {}, async init() {} });\n      },\n    }),\n  );\n}\n\n/**\n * Given a set of extension points and features, find the extension\n * points that we mock and tie them to the correct plugin ID.\n * @returns\n */\nfunction createExtensionPointTestModules(\n  features: Array<BackendFeature>,\n  extensionPointTuples?: readonly [\n    ref: ExtensionPoint<unknown>,\n    impl: unknown,\n  ][],\n): Array<BackendFeature> {\n  if (!extensionPointTuples) {\n    return [];\n  }\n\n  const registrations = features.flatMap(feature => {\n    if (isInternalBackendRegistrations(feature)) {\n      return feature.getRegistrations();\n    }\n    return [];\n  });\n\n  const extensionPointMap = new Map(\n    extensionPointTuples.map(ep => [ep[0].id, ep]),\n  );\n  const extensionPointsToSort = new Set(extensionPointMap.keys());\n  const extensionPointsByPlugin = new Map<string, string[]>();\n\n  for (const registration of registrations) {\n    if (registration.type === 'module') {\n      const testDep = Object.values(registration.init.deps).filter(dep =>\n        extensionPointsToSort.has(dep.id),\n      );\n      if (testDep.length > 0) {\n        let points = extensionPointsByPlugin.get(registration.pluginId);\n        if (!points) {\n          points = [];\n          extensionPointsByPlugin.set(registration.pluginId, points);\n        }\n        for (const { id } of testDep) {\n          points.push(id);\n          extensionPointsToSort.delete(id);\n        }\n      }\n    }\n  }\n\n  if (extensionPointsToSort.size > 0) {\n    const list = Array.from(extensionPointsToSort)\n      .map(id => `'${id}'`)\n      .join(', ');\n    throw new Error(\n      `Unable to determine the plugin ID of extension point(s) ${list}. ` +\n        'Tested extension points must be depended on by one or more tested modules.',\n    );\n  }\n\n  const modules = [];\n\n  for (const [pluginId, pluginExtensionPointIds] of extensionPointsByPlugin) {\n    modules.push(\n      createBackendModule({\n        pluginId,\n        moduleId: 'test-extension-point-registration',\n        register(reg) {\n          for (const id of pluginExtensionPointIds) {\n            const tuple = extensionPointMap.get(id)!;\n            reg.registerExtensionPoint(...tuple);\n          }\n\n          reg.registerInit({ deps: {}, async init() {} });\n        },\n      }),\n    );\n  }\n\n  return modules;\n}\n\nfunction isPromise<T>(value: unknown | Promise<T>): value is Promise<T> {\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n\n// Same as in the backend-app-api, handles double defaults from dynamic imports\nfunction unwrapFeature(\n  feature: BackendFeature | { default: BackendFeature },\n): BackendFeature {\n  if ('$$type' in feature) {\n    return feature;\n  }\n\n  if ('default' in feature) {\n    return feature.default;\n  }\n\n  return feature;\n}\n\nconst backendInstancesToCleanUp = new Array<Backend>();\n\n/** @public */\nexport async function startTestBackend<TExtensionPoints extends any[]>(\n  options: TestBackendOptions<TExtensionPoints>,\n): Promise<TestBackend> {\n  const { extensionPoints, ...otherOptions } = options;\n\n  // Unpack input into awaited plain BackendFeatures\n  const features: BackendFeature[] = await Promise.all(\n    options.features?.map(async val => {\n      if (isPromise(val)) {\n        const { default: feature } = await val;\n        return unwrapFeature(feature);\n      }\n      return unwrapFeature(val);\n    }) ?? [],\n  );\n\n  let server: ExtendedHttpServer;\n\n  const rootHttpRouterFactory = createServiceFactory({\n    service: coreServices.rootHttpRouter,\n    deps: {\n      config: coreServices.rootConfig,\n      lifecycle: coreServices.rootLifecycle,\n      rootLogger: coreServices.rootLogger,\n      health: coreServices.rootHealth,\n    },\n    async factory({ config, lifecycle, rootLogger, health }) {\n      const router = DefaultRootHttpRouter.create();\n      const logger = rootLogger.child({ service: 'rootHttpRouter' });\n\n      const app = express();\n\n      const middleware = MiddlewareFactory.create({ config, logger });\n      const healthRouter = createHealthRouter({ config, health });\n\n      app.use(healthRouter);\n      app.use(router.handler());\n      app.use(middleware.notFound());\n      app.use(middleware.error());\n\n      server = await createHttpServer(\n        app,\n        { listen: { host: '', port: 0 } },\n        { logger },\n      );\n\n      lifecycle.addShutdownHook(() => server.stop(), { logger });\n\n      await server.start();\n\n      return router;\n    },\n  });\n\n  const discoveryFactory = createServiceFactory({\n    service: coreServices.discovery,\n    deps: {\n      rootHttpRouter: coreServices.rootHttpRouter,\n    },\n    async factory() {\n      if (!server) {\n        throw new Error('Test server not started yet');\n      }\n      const port = server.port();\n      const discovery = HostDiscovery.fromConfig(\n        new ConfigReader({\n          backend: { baseUrl: `http://localhost:${port}`, listen: { port } },\n        }),\n      );\n      return discovery;\n    },\n  });\n\n  const backend = createSpecializedBackend({\n    ...otherOptions,\n    defaultServiceFactories: [\n      ...defaultServiceFactories,\n      rootHttpRouterFactory,\n      discoveryFactory,\n    ],\n  });\n\n  backendInstancesToCleanUp.push(backend);\n\n  for (const m of createExtensionPointTestModules(features, extensionPoints)) {\n    backend.add(m);\n  }\n  for (const p of createPluginsForOrphanModules(features)) {\n    backend.add(p);\n  }\n  for (const feature of features) {\n    backend.add(feature);\n  }\n\n  await backend.start();\n\n  return Object.assign(backend, {\n    get server() {\n      if (!server) {\n        throw new Error('TestBackend server is not available');\n      }\n      return server;\n    },\n  });\n}\n\nlet registered = false;\nfunction registerTestHooks() {\n  if (typeof afterAll !== 'function') {\n    return;\n  }\n  if (registered) {\n    return;\n  }\n  registered = true;\n\n  afterAll(async () => {\n    await Promise.all(\n      backendInstancesToCleanUp.map(async backend => {\n        try {\n          await backend.stop();\n        } catch (error) {\n          console.error(`Failed to stop backend after tests, ${error}`);\n        }\n      }),\n    );\n    backendInstancesToCleanUp.length = 0;\n  });\n}\n\nregisterTestHooks();\n\nfunction toInternalBackendFeature(\n  feature: BackendFeature,\n): InternalBackendFeature {\n  if (feature.$$type !== '@backstage/BackendFeature') {\n    throw new Error(`Invalid BackendFeature, bad type '${feature.$$type}'`);\n  }\n  const internal = feature as InternalBackendFeature;\n  if (internal.version !== 'v1') {\n    throw new Error(\n      `Invalid BackendFeature, bad version '${internal.version}'`,\n    );\n  }\n  return internal;\n}\n\nfunction isInternalBackendRegistrations(\n  feature: BackendFeature,\n): feature is InternalBackendRegistrations {\n  const internal = toInternalBackendFeature(feature);\n  if (internal.featureType === 'registrations') {\n    return true;\n  }\n  // Backwards compatibility for v1 registrations that use duck typing\n  return 'getRegistrations' in internal;\n}\n"],"names":["mockServices","createBackendPlugin","createBackendModule","createServiceFactory","coreServices","DefaultRootHttpRouter","express","MiddlewareFactory","createHealthRouter","createHttpServer","discovery","HostDiscovery","ConfigReader","createSpecializedBackend"],"mappings":"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"}