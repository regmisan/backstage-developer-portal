import * as React$1 from 'react';
import React__default, { ReactNode, CSSProperties } from 'react';
import { Input as Input$1 } from '@base-ui-components/react/input';
import { Field as Field$1 } from '@base-ui-components/react/field';
import { Tooltip as Tooltip$1 } from '@base-ui-components/react/tooltip';
import { Menu as Menu$1 } from '@base-ui-components/react/menu';
import { ScrollArea as ScrollArea$1 } from '@base-ui-components/react/scroll-area';

/** @public */
type IconNames = 'account-circle' | 'alert' | 'arrow-down' | 'arrow-down-circle' | 'caret-down' | 'caret-left' | 'caret-right' | 'caret-up' | 'arrow-left' | 'arrow-left-circle' | 'arrow-left-down' | 'arrow-left-up' | 'arrow-right' | 'arrow-right-circle' | 'arrow-right-down' | 'arrow-right-up' | 'arrow-up' | 'arrow-up-circle' | 'braces' | 'brackets' | 'bug' | 'check' | 'check-double' | 'chevron-down' | 'chevron-left' | 'chevron-right' | 'chevron-up' | 'cloud' | 'code' | 'discord' | 'download' | 'external-link' | 'eye' | 'eye-off' | 'filter' | 'flower' | 'github' | 'git-repository' | 'group' | 'heart' | 'moon' | 'plus' | 'sidebar-fold' | 'sidebar-unfold' | 'sparkling' | 'star' | 'sun' | 'terminal' | 'trash' | 'upload' | 'user' | 'youtube' | 'zoom-in' | 'zoom-out';
/** @public */
type IconMap = Partial<Record<IconNames, React.ComponentType>>;
/** @public */
type IconProps = {
    name: IconNames;
    size?: number;
    className?: string;
    style?: React.CSSProperties;
};
/** @public */
interface IconContextProps {
    icons: IconMap;
}
/** @public */
interface IconProviderProps {
    children?: ReactNode;
    overrides?: Partial<Record<IconNames, React.ComponentType>>;
}

/** @public */
declare const IconContext: React$1.Context<IconContextProps>;
/** @public */
declare const useIcons: () => IconContextProps;

/** @public */
type AsProps = 'div' | 'span' | 'p' | 'article' | 'section' | 'main' | 'nav' | 'aside' | 'ul' | 'ol' | 'li' | 'details' | 'summary' | 'dd' | 'dl' | 'dt';
/** @public */
type Breakpoint = 'initial' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
/** @public */
type Responsive<T> = T | Partial<Record<Breakpoint, T>>;
/** @public */
type Space = '0.5' | '1' | '1.5' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | string;
/** @public */
type Display = 'none' | 'flex' | 'block' | 'inline';
/** @public */
type FlexDirection = 'row' | 'column';
/** @public */
type FlexWrap = 'wrap' | 'nowrap' | 'wrap-reverse';
/** @public */
type JustifyContent = 'stretch' | 'start' | 'center' | 'end' | 'around' | 'between';
/** @public */
type AlignItems = 'stretch' | 'start' | 'center' | 'end';
/** @public */
type BorderRadius = 'none' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
/** @public */
type Border = 'none' | 'base' | 'error' | 'warning' | 'selected';
/** @public */
type Columns = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'auto';
/** @public */
interface SpaceProps {
    m?: Responsive<Space>;
    mb?: Responsive<Space>;
    ml?: Responsive<Space>;
    mr?: Responsive<Space>;
    mt?: Responsive<Space>;
    mx?: Responsive<Space>;
    my?: Responsive<Space>;
    p?: Responsive<Space>;
    pb?: Responsive<Space>;
    pl?: Responsive<Space>;
    pr?: Responsive<Space>;
    pt?: Responsive<Space>;
    px?: Responsive<Space>;
    py?: Responsive<Space>;
}
/** @public */
interface UtilityProps extends SpaceProps {
    alignItems?: Responsive<AlignItems>;
    border?: Responsive<Border>;
    borderRadius?: Responsive<BorderRadius>;
    colEnd?: Responsive<Columns | 'auto'>;
    colSpan?: Responsive<Columns | 'full'>;
    colStart?: Responsive<Columns | 'auto'>;
    columns?: Responsive<Columns>;
    display?: Responsive<Display>;
    flexDirection?: Responsive<FlexDirection>;
    flexWrap?: Responsive<FlexWrap>;
    gap?: Responsive<Space>;
    justifyContent?: Responsive<JustifyContent>;
    rowSpan?: Responsive<Columns | 'full'>;
}

/** @public */
declare const breakpoints: Breakpoint[];
/** @public */
type BooleanPropDef = {
    type: 'boolean';
    default?: boolean;
    required?: boolean;
    className?: string;
};
/** @public */
type StringPropDef = {
    type: 'string';
    default?: string;
    required?: boolean;
};
/** @public */
type ReactNodePropDef = {
    type: 'ReactNode';
    default?: React__default.ReactNode;
    required?: boolean;
};
/** @public */
type EnumPropDef<T> = {
    type: 'enum';
    values: readonly T[];
    default?: T;
    required?: boolean;
};
/** @public */
type EnumOrStringPropDef<T> = {
    type: 'enum | string';
    values: readonly T[];
    default?: T | string;
    required?: boolean;
};
/** @public */
type NonStylingPropDef = {
    className?: never;
    customProperties?: never;
    parseValue?: never;
};
/** @public */
type StylingPropDef = {
    className: string;
    parseValue?: (value: string) => string | undefined;
};
/** @public */
type ArbitraryStylingPropDef = {
    className: string;
    customProperties: `--${string}`[];
    parseValue?: (value: string) => string | undefined;
};
/** @public */
type RegularPropDef<T> = ReactNodePropDef | BooleanPropDef | (StringPropDef & ArbitraryStylingPropDef) | (StringPropDef & NonStylingPropDef) | (EnumPropDef<T> & StylingPropDef) | (EnumPropDef<T> & NonStylingPropDef) | (EnumOrStringPropDef<T> & ArbitraryStylingPropDef) | (EnumOrStringPropDef<T> & NonStylingPropDef);
/** @public */
type ResponsivePropDef<T = any> = RegularPropDef<T> & {
    responsive: true;
};
/** @public */
type PropDef<T = any> = RegularPropDef<T> | ResponsivePropDef<T>;
/** @public */
type GetPropDefType<Def> = Def extends BooleanPropDef ? Def extends ResponsivePropDef ? Responsive<boolean> : boolean : Def extends StringPropDef ? Def extends ResponsivePropDef ? Responsive<string> : string : Def extends ReactNodePropDef ? Def extends ResponsivePropDef ? Responsive<React__default.ReactNode> : React__default.ReactNode : Def extends EnumOrStringPropDef<infer Type> ? Def extends ResponsivePropDef<infer Type extends string> ? Responsive<string | Type> : string | Type : Def extends EnumPropDef<infer Type> ? Def extends ResponsivePropDef<infer Type> ? Responsive<Type> : Type : never;
/** @public */
type GetPropDefTypes<P> = {
    [K in keyof P]?: GetPropDefType<P[K]>;
};

/** @public */
declare const heightPropDefs: {
    height: {
        type: "string";
        className: string;
        customProperties: "--height"[];
        responsive: true;
    };
    minHeight: {
        type: "string";
        className: string;
        customProperties: "--min-height"[];
        responsive: true;
    };
    maxHeight: {
        type: "string";
        className: string;
        customProperties: "--max-height"[];
        responsive: true;
    };
};
/** @public */
type HeightProps = GetPropDefTypes<typeof heightPropDefs>;

/** @public */
declare const widthPropDefs: {
    width: {
        type: "string";
        className: string;
        customProperties: "--width"[];
        responsive: true;
    };
    minWidth: {
        type: "string";
        className: string;
        customProperties: "--min-width"[];
        responsive: true;
    };
    maxWidth: {
        type: "string";
        className: string;
        customProperties: "--max-width"[];
        responsive: true;
    };
};
/** @public */
type WidthProps = GetPropDefTypes<typeof widthPropDefs>;

/** @public */
declare const positionPropDefs: {
    position: {
        type: "enum";
        className: string;
        values: readonly ["static", "relative", "absolute", "fixed", "sticky"];
        responsive: true;
    };
};
/** @public */
type PositionProps = GetPropDefTypes<typeof positionPropDefs>;

/** @public */
declare const displayPropDefs: {
    display: {
        type: "enum";
        className: string;
        values: readonly ["none", "inline", "inline-block", "block"];
        responsive: true;
    };
};
/** @public */
type DisplayProps = GetPropDefTypes<typeof displayPropDefs>;

/** @public */
declare const boxPropDefs: {
    as: {
        type: "enum";
        values: readonly ["div", "span"];
        default: "div";
    };
};
/** @public */
type BoxOwnProps = GetPropDefTypes<typeof boxPropDefs>;

/** @public */
interface BoxProps extends SpaceProps {
    display?: DisplayProps['display'];
    as?: BoxOwnProps['as'];
    width?: WidthProps['width'];
    minWidth?: WidthProps['minWidth'];
    maxWidth?: WidthProps['maxWidth'];
    height?: HeightProps['height'];
    minHeight?: HeightProps['minHeight'];
    maxHeight?: HeightProps['maxHeight'];
    position?: PositionProps['position'];
    children?: React.ReactNode;
    className?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Box: React$1.ForwardRefExoticComponent<BoxProps & React$1.RefAttributes<HTMLDivElement>>;

/** @public */
declare const gapPropDefs: {
    gap: {
        type: "enum | string";
        className: string;
        customProperties: "--gap"[];
        values: string[];
        responsive: true;
        default: string;
    };
};
/** @public */
type GapProps = GetPropDefTypes<typeof gapPropDefs>;

/** @public */
declare const gridPropDefs: {
    columns: {
        type: "enum | string";
        className: string;
        customProperties: "--columns"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
        default: string;
    };
};
/** @public */
declare const gridItemPropDefs: {
    colSpan: {
        type: "enum | string";
        className: string;
        customProperties: "--col-span"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    colEnd: {
        type: "enum | string";
        className: string;
        customProperties: "--col-end"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    colStart: {
        type: "enum | string";
        className: string;
        customProperties: "--col-start"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
    rowSpan: {
        type: "enum | string";
        className: string;
        customProperties: "--row-span"[];
        values: readonly ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "auto"];
        responsive: true;
    };
};
/** @public */
type GridOwnProps = GetPropDefTypes<typeof gridPropDefs>;
/** @public */
type GridItemOwnProps = GetPropDefTypes<typeof gridItemPropDefs>;

/** @public */
interface GridProps extends SpaceProps {
    children?: React.ReactNode;
    className?: string;
    columns?: GridOwnProps['columns'];
    gap?: GapProps['gap'];
    style?: React.CSSProperties;
}
/** @public */
interface GridItemProps {
    children?: React.ReactNode;
    className?: string;
    colSpan?: GridItemOwnProps['colSpan'];
    colEnd?: GridItemOwnProps['colEnd'];
    colStart?: GridItemOwnProps['colStart'];
    rowSpan?: GridItemOwnProps['rowSpan'];
    style?: React.CSSProperties;
}

/** @public */
declare const Grid: React$1.ForwardRefExoticComponent<GridProps & React$1.RefAttributes<HTMLDivElement>> & {
    Item: React$1.ForwardRefExoticComponent<GridItemProps & React$1.RefAttributes<HTMLDivElement>>;
};

/** @public */
declare const flexPropDefs: {
    align: {
        type: "enum";
        className: string;
        values: readonly ["start", "center", "end", "baseline", "stretch"];
        responsive: true;
    };
    direction: {
        type: "enum";
        className: string;
        values: readonly ["row", "column", "row-reverse", "column-reverse"];
        responsive: true;
    };
    justify: {
        type: "enum";
        className: string;
        values: readonly ["start", "center", "end", "between"];
        responsive: true;
    };
};
/** @public */
type FlexOwnProps = GetPropDefTypes<typeof flexPropDefs>;

/** @public */
interface FlexProps extends SpaceProps {
    children: React.ReactNode;
    gap?: GapProps['gap'];
    align?: FlexOwnProps['align'];
    justify?: FlexOwnProps['justify'];
    direction?: FlexOwnProps['direction'];
    className?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Flex: React$1.ForwardRefExoticComponent<FlexProps & React$1.RefAttributes<HTMLDivElement>>;

/** @public */
interface ContainerProps {
    children?: React.ReactNode;
    className?: string;
    my?: SpaceProps['my'];
    mb?: SpaceProps['mb'];
    mt?: SpaceProps['mt'];
    py?: SpaceProps['py'];
    pb?: SpaceProps['pb'];
    pt?: SpaceProps['pt'];
    style?: React.CSSProperties;
}

/** @public */
declare const Container: React$1.ForwardRefExoticComponent<ContainerProps & React$1.RefAttributes<HTMLDivElement>>;

/** @public */
interface TextProps {
    children: ReactNode;
    variant?: 'subtitle' | 'body' | 'caption' | 'label' | Partial<Record<Breakpoint, 'subtitle' | 'body' | 'caption' | 'label'>>;
    weight?: 'regular' | 'bold' | Partial<Record<Breakpoint, 'regular' | 'bold'>>;
    color?: 'primary' | 'secondary' | 'danger' | 'warning' | 'success' | Partial<Record<Breakpoint, 'primary' | 'secondary' | 'danger' | 'warning' | 'success'>>;
    className?: string;
    style?: CSSProperties;
}

/** @public */
declare const Text: React__default.ForwardRefExoticComponent<TextProps & React__default.RefAttributes<HTMLParagraphElement>>;

/** @public */
interface HeadingProps {
    children: React.ReactNode;
    variant?: 'display' | 'title1' | 'title2' | 'title3' | 'title4' | 'title5' | Partial<Record<Breakpoint, 'display' | 'title1' | 'title2' | 'title3' | 'title4' | 'title5'>>;
    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';
    className?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Heading: React__default.ForwardRefExoticComponent<HeadingProps & React__default.RefAttributes<HTMLHeadingElement>>;

/** @public */
declare const icons: IconMap;

/** @public */
declare const Icon: (props: IconProps) => React__default.JSX.Element;

/** @public */
declare const IconProvider: (props: IconProviderProps) => React__default.JSX.Element;

/** @public */
declare const buttonPropDefs: {
    variant: {
        type: "enum";
        values: ("primary" | "secondary")[];
        className: string;
        default: "primary";
        responsive: true;
    };
    size: {
        type: "enum";
        values: ("small" | "medium")[];
        className: string;
        default: "medium";
        responsive: true;
    };
};
/** @public */
type ButtonOwnProps = GetPropDefTypes<typeof buttonPropDefs>;

/**
 * Properties for {@link Button}
 *
 * @public
 */
interface ButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children'> {
    /**
     * The size of the button
     * @defaultValue 'medium'
     */
    size?: ButtonOwnProps['size'];
    /**
     * The visual variant of the button
     * @defaultValue 'primary'
     */
    variant?: ButtonOwnProps['variant'];
    /**
     * The content of the button
     */
    children: React.ReactNode;
    /**
     * Optional icon to display at the start of the button
     */
    iconStart?: IconNames;
    /**
     * Optional icon to display at the end of the button
     */
    iconEnd?: IconNames;
}

/** @public */
declare const Button: React__default.ForwardRefExoticComponent<ButtonProps & React__default.RefAttributes<HTMLButtonElement>>;

/** @public */
declare const iconButtonPropDefs: {
    variant: {
        type: "enum";
        values: ("primary" | "secondary")[];
        className: string;
        default: "primary";
        responsive: true;
    };
    size: {
        type: "enum";
        values: ("small" | "medium")[];
        className: string;
        default: "medium";
        responsive: true;
    };
};
/** @public */
type IconButtonOwnProps = GetPropDefTypes<typeof iconButtonPropDefs>;

/**
 * Properties for {@link IconButton}
 *
 * @public
 */
interface IconButtonProps extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'children'> {
    /**
     * The size of the button
     * @defaultValue 'medium'
     */
    size?: IconButtonOwnProps['size'];
    /**
     * The visual variant of the button
     * @defaultValue 'primary'
     */
    variant?: IconButtonOwnProps['variant'];
    /**
     * Icon to display at the start of the button
     */
    icon: IconNames;
}

/** @public */
declare const IconButton: React__default.ForwardRefExoticComponent<IconButtonProps & React__default.RefAttributes<HTMLButtonElement>>;

/** @public */
interface CheckboxProps {
    label?: string;
    defaultChecked?: boolean;
    checked?: boolean;
    onChange?: (checked: boolean) => void;
    disabled?: boolean;
    required?: boolean;
    className?: string;
    name?: string;
    value?: string;
    style?: React.CSSProperties;
}

/** @public */
declare const Checkbox: React__default.ForwardRefExoticComponent<CheckboxProps & React__default.RefAttributes<HTMLButtonElement>>;

/** @public */
declare const Table: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableElement> & React$1.RefAttributes<HTMLTableElement>>;
/** @public */
declare const TableHeader: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
/** @public */
declare const TableBody: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
/** @public */
declare const TableFooter: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableSectionElement> & React$1.RefAttributes<HTMLTableSectionElement>>;
/** @public */
declare const TableRow: React$1.ForwardRefExoticComponent<React$1.HTMLAttributes<HTMLTableRowElement> & React$1.RefAttributes<HTMLTableRowElement>>;
/** @public */
declare const TableHead: React$1.ForwardRefExoticComponent<React$1.ThHTMLAttributes<HTMLTableCellElement> & React$1.RefAttributes<HTMLTableCellElement>>;
/** @public */
declare const TableCell: React$1.ForwardRefExoticComponent<React$1.TdHTMLAttributes<HTMLTableCellElement> & React$1.RefAttributes<HTMLTableCellElement>>;

/** @public */
interface InputProps extends Omit<Input$1.Props, 'size'> {
    size?: 'sm' | 'md';
}

/** @public */
declare const Input: React__default.ForwardRefExoticComponent<InputProps & React__default.RefAttributes<HTMLInputElement>>;

/** @public */
declare const Field: {
    Root: React__default.ForwardRefExoticComponent<Omit<Field$1.Root.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Label: React__default.ForwardRefExoticComponent<Omit<Field$1.Label.Props & React__default.RefAttributes<any>, "ref"> & React__default.RefAttributes<any>>;
    Description: React__default.ForwardRefExoticComponent<Omit<Field$1.Description.Props & React__default.RefAttributes<HTMLParagraphElement>, "ref"> & React__default.RefAttributes<HTMLParagraphElement>>;
    Error: React__default.ForwardRefExoticComponent<Omit<Field$1.Error.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Validity: ({ children, className, ...props }: React__default.ComponentPropsWithoutRef<typeof Field$1.Validity> & {
        className?: string;
    }) => React__default.JSX.Element;
};

/** @public */
declare const Tooltip: {
    Provider: React__default.FC<Tooltip$1.Provider.Props>;
    Root: React__default.FC<Tooltip$1.Root.Props>;
    Trigger: React__default.ForwardRefExoticComponent<Omit<Tooltip$1.Trigger.Props & React__default.RefAttributes<any>, "ref"> & React__default.RefAttributes<any>>;
    Portal: typeof Tooltip$1.Portal;
    Positioner: React__default.ForwardRefExoticComponent<Omit<Tooltip$1.Positioner.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Popup: React__default.ForwardRefExoticComponent<Omit<Tooltip$1.Popup.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Arrow: React__default.ForwardRefExoticComponent<Omit<Tooltip$1.Arrow.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
};

/** @public */
type MenuComponent = {
    Root: typeof Menu$1.Root;
    Trigger: typeof Menu$1.Trigger;
    Portal: typeof Menu$1.Portal;
    Backdrop: typeof Menu$1.Backdrop;
    Positioner: typeof Menu$1.Positioner;
    Popup: typeof Menu$1.Popup;
    Arrow: typeof Menu$1.Arrow;
    Item: typeof Menu$1.Item;
    Group: typeof Menu$1.Group;
    GroupLabel: typeof Menu$1.GroupLabel;
    RadioGroup: typeof Menu$1.RadioGroup;
    RadioItem: typeof Menu$1.RadioItem;
    RadioItemIndicator: typeof Menu$1.RadioItemIndicator;
    CheckboxItem: typeof Menu$1.CheckboxItem;
    CheckboxItemIndicator: typeof Menu$1.CheckboxItemIndicator;
    SubmenuTrigger: typeof Menu$1.SubmenuTrigger;
    Separator: typeof Menu$1.Separator;
};

/** @public */
declare const Menu: MenuComponent;

/** @public */
declare const ScrollArea: {
    Root: React__default.ForwardRefExoticComponent<Omit<ScrollArea$1.Root.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Viewport: React__default.ForwardRefExoticComponent<Omit<ScrollArea$1.Viewport.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Scrollbar: React__default.ForwardRefExoticComponent<Omit<ScrollArea$1.Scrollbar.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
    Thumb: React__default.ForwardRefExoticComponent<Omit<ScrollArea$1.Thumb.Props & React__default.RefAttributes<HTMLDivElement>, "ref"> & React__default.RefAttributes<HTMLDivElement>>;
};

/** @public */
declare const marginPropDefs: (spacingValues: string[]) => {
    m: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--m"[];
        responsive: true;
    };
    mx: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mx"[];
        responsive: true;
    };
    my: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--my"[];
        responsive: true;
    };
    mt: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mt"[];
        responsive: true;
    };
    mr: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mr"[];
        responsive: true;
    };
    mb: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--mb"[];
        responsive: true;
    };
    ml: {
        type: "enum | string";
        values: string[];
        className: string;
        customProperties: "--ml"[];
        responsive: true;
    };
};
/** @public */
type MarginProps = GetPropDefTypes<typeof marginPropDefs>;

/** @public */
declare const paddingPropDefs: (spacingValues: string[]) => {
    p: {
        type: "enum | string";
        className: string;
        customProperties: "--p"[];
        values: string[];
        responsive: true;
    };
    px: {
        type: "enum | string";
        className: string;
        customProperties: "--px"[];
        values: string[];
        responsive: true;
    };
    py: {
        type: "enum | string";
        className: string;
        customProperties: "--py"[];
        values: string[];
        responsive: true;
    };
    pt: {
        type: "enum | string";
        className: string;
        customProperties: "--pt"[];
        values: string[];
        responsive: true;
    };
    pr: {
        type: "enum | string";
        className: string;
        customProperties: "--pr"[];
        values: string[];
        responsive: true;
    };
    pb: {
        type: "enum | string";
        className: string;
        customProperties: "--pb"[];
        values: string[];
        responsive: true;
    };
    pl: {
        type: "enum | string";
        className: string;
        customProperties: "--pl"[];
        values: string[];
        responsive: true;
    };
};
/** @public */
type PaddingProps = GetPropDefTypes<typeof paddingPropDefs>;

export { type AlignItems, type ArbitraryStylingPropDef, type AsProps, type BooleanPropDef, type Border, type BorderRadius, Box, type BoxOwnProps, type BoxProps, type Breakpoint, Button, type ButtonOwnProps, type ButtonProps, Checkbox, type CheckboxProps, type Columns, Container, type ContainerProps, type Display, type DisplayProps, type EnumOrStringPropDef, type EnumPropDef, Field, Flex, type FlexDirection, type FlexOwnProps, type FlexProps, type FlexWrap, type GapProps, type GetPropDefType, type GetPropDefTypes, Grid, type GridItemOwnProps, type GridItemProps, type GridOwnProps, type GridProps, Heading, type HeadingProps, type HeightProps, Icon, IconButton, type IconButtonOwnProps, type IconButtonProps, IconContext, type IconContextProps, type IconMap, type IconNames, type IconProps, IconProvider, type IconProviderProps, Input, type InputProps, type JustifyContent, type MarginProps, Menu, type MenuComponent, type NonStylingPropDef, type PaddingProps, type PositionProps, type PropDef, type ReactNodePropDef, type RegularPropDef, type Responsive, type ResponsivePropDef, ScrollArea, type Space, type SpaceProps, type StringPropDef, type StylingPropDef, Table, TableBody, TableCell, TableFooter, TableHead, TableHeader, TableRow, Text, type TextProps, Tooltip, type UtilityProps, type WidthProps, boxPropDefs, breakpoints, buttonPropDefs, displayPropDefs, flexPropDefs, gapPropDefs, gridItemPropDefs, gridPropDefs, heightPropDefs, iconButtonPropDefs, icons, marginPropDefs, paddingPropDefs, positionPropDefs, useIcons, widthPropDefs };
