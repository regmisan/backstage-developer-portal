'use strict';

var lazy = require('../lib/lazy.cjs.js');
var index = require('../modules/config/index.cjs.js');
var index$2 = require('../modules/build/index.cjs.js');
var index$3 = require('../modules/info/index.cjs.js');
var index$1 = require('../modules/migrate/index.cjs.js');
var index$4 = require('../modules/test/index.cjs.js');
var index$5 = require('../modules/lint/index.cjs.js');

function registerRepoCommand(program) {
  const command = program.command("repo [command]").description("Command that run across an entire Backstage project");
  index$2.registerRepoCommands(command);
  index$4.registerRepoCommands(command);
  index$5.registerRepoCommands(command);
  command.command("fix").description("Automatically fix packages in the project").option(
    "--publish",
    "Enable additional fixes that only apply when publishing packages"
  ).option(
    "--check",
    "Fail if any packages would have been changed by the command"
  ).action(lazy.lazy(() => import('./repo/fix.cjs.js'), "command"));
  command.command("clean").description("Delete cache and output directories").action(lazy.lazy(() => import('./repo/clean.cjs.js'), "command"));
  command.command("list-deprecations").description("List deprecations").option("--json", "Output as JSON").action(lazy.lazy(() => import('./repo/list-deprecations.cjs.js'), "command"));
}
function registerScriptCommand(program) {
  const command = program.command("package [command]").description("Lifecycle scripts for individual packages");
  command.command("start").description("Start a package for local development").option(...index.configOption).option("--role <name>", "Run the command with an explicit package role").option("--check", "Enable type checking and linting if available").option("--inspect [host]", "Enable debugger in Node.js environments").option(
    "--inspect-brk [host]",
    "Enable debugger in Node.js environments, breaking before code starts"
  ).option("--require <path>", "Add a --require argument to the node process").option("--link <path>", "Link an external workspace for module resolution").action(lazy.lazy(() => import('./start/index.cjs.js'), "command"));
  index$2.registerPackageCommands(command);
  index$4.registerPackageCommands(command);
  index$5.registerPackageCommands(command);
  command.command("clean").description("Delete cache directories").action(lazy.lazy(() => import('./clean/clean.cjs.js'), "default"));
  command.command("prepack").description("Prepares a package for packaging before publishing").action(lazy.lazy(() => import('./pack.cjs.js'), "pre"));
  command.command("postpack").description("Restores the changes made by the prepack command").action(lazy.lazy(() => import('./pack.cjs.js'), "post"));
}
function registerCommands(program) {
  program.command("new").storeOptionsAsProperties(false).description(
    "Open up an interactive guide to creating new things in your app"
  ).option(
    "--select <name>",
    "Select the thing you want to be creating upfront"
  ).option(
    "--option <name>=<value>",
    "Pre-fill options for the creation process",
    (opt, arr) => [...arr, opt],
    []
  ).option(
    "--skip-install",
    `Skips running 'yarn install' and 'yarn lint --fix'`
  ).option("--scope <scope>", "The scope to use for new packages").option(
    "--npm-registry <URL>",
    "The package registry to use for new packages"
  ).option(
    "--baseVersion <version>",
    "The version to use for any new packages (default: 0.1.0)"
  ).option(
    "--license <license>",
    "The license to use for any new packages (default: Apache-2.0)"
  ).option("--no-private", "Do not mark new packages as private").action(lazy.lazy(() => import('./new/new.cjs.js'), "default"));
  index.registerCommands(program);
  registerRepoCommand(program);
  registerScriptCommand(program);
  index$1.registerCommands(program);
  index$2.registerCommands(program);
  index$3.registerCommands(program);
  program.command("create-github-app <github-org>").description("Create new GitHub App in your organization.").action(lazy.lazy(() => import('./create-github-app/index.cjs.js'), "default"));
  program.command("create").allowUnknownOption(true).action(removed("use 'backstage-cli new' instead"));
  program.command("create-plugin").allowUnknownOption(true).action(removed("use 'backstage-cli new' instead"));
  program.command("plugin:diff").allowUnknownOption(true).action(removed("use 'backstage-cli fix' instead"));
  program.command("test").allowUnknownOption(true).action(
    removed(
      "use 'backstage-cli repo test' or 'backstage-cli package test' instead"
    )
  );
  program.command("clean").allowUnknownOption(true).action(removed("use 'backstage-cli package clean' instead"));
  program.command("versions:check").allowUnknownOption(true).action(removed("use 'yarn dedupe' or 'yarn-deduplicate' instead"));
  program.command("install").allowUnknownOption(true).action(removed());
  program.command("onboard").allowUnknownOption(true).action(removed());
}
function removed(message) {
  return () => {
    console.error(
      message ? `This command has been removed, ${message}` : "This command has been removed"
    );
    process.exit(1);
  };
}

exports.registerCommands = registerCommands;
exports.registerRepoCommand = registerRepoCommand;
exports.registerScriptCommand = registerScriptCommand;
//# sourceMappingURL=index.cjs.js.map
