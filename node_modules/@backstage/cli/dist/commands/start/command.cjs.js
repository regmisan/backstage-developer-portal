'use strict';

var fs = require('fs-extra');
var node_path = require('node:path');
var role = require('../../lib/role.cjs.js');
var startBackend = require('./startBackend.cjs.js');
var startFrontend = require('./startFrontend.cjs.js');
var errors = require('@backstage/errors');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function command(opts) {
  const role$1 = await role.findRoleFromCommand(opts);
  if (opts.link) {
    const dir = node_path.resolve(opts.link);
    if (!fs__default.default.pathExistsSync(dir)) {
      throw new Error(
        `Invalid workspace link, directory does not exist: ${dir}`
      );
    }
    const pkgJson = await fs__default.default.readJson(node_path.resolve(dir, "package.json")).catch((error) => {
      throw new errors.ForwardedError(
        "Failed to read package.json in linked workspace",
        error
      );
    });
    if (!pkgJson.workspaces) {
      throw new Error(
        `Invalid workspace link, directory is not a workspace: ${dir}`
      );
    }
  }
  const options = {
    configPaths: opts.config,
    checksEnabled: Boolean(opts.check),
    linkedWorkspace: opts.link,
    inspectEnabled: opts.inspect,
    inspectBrkEnabled: opts.inspectBrk,
    require: opts.require
  };
  switch (role$1) {
    case "backend":
      return startBackend.startBackend(options);
    case "backend-plugin":
    case "backend-plugin-module":
    case "node-library":
      return startBackend.startBackendPlugin(options);
    case "frontend":
      return startFrontend.startFrontend({
        ...options,
        entry: "src/index",
        verifyVersions: true
      });
    case "web-library":
    case "frontend-plugin":
    case "frontend-plugin-module":
      return startFrontend.startFrontend({ entry: "dev/index", ...options });
    case "frontend-dynamic-container":
      return startFrontend.startFrontend({
        entry: "src/index",
        ...options,
        skipOpenBrowser: true,
        isModuleFederationRemote: true
      });
    default:
      throw new Error(
        `Start command is not supported for package role '${role$1}'`
      );
  }
}

exports.command = command;
//# sourceMappingURL=command.cjs.js.map
