'use strict';

var lazy = require('../../lib/lazy.cjs.js');

function registerCommands(program) {
  program.command("versions:bump").option(
    "--pattern <glob>",
    "Override glob for matching packages to upgrade"
  ).option(
    "--release <version|next|main>",
    "Bump to a specific Backstage release line or version",
    "main"
  ).option("--skip-install", "Skips yarn install step").option("--skip-migrate", "Skips migration of any moved packages").description("Bump Backstage packages to the latest versions").action(lazy.lazy(() => import('./commands/versions/bump.cjs.js'), "default"));
  program.command("versions:migrate").option(
    "--pattern <glob>",
    "Override glob for matching packages to upgrade"
  ).option(
    "--skip-code-changes",
    "Skip code changes and only update package.json files"
  ).description(
    "Migrate any plugins that have been moved to the @backstage-community namespace automatically"
  ).action(lazy.lazy(() => import('./commands/versions/migrate.cjs.js'), "default"));
  const command = program.command("migrate [command]").description("Migration utilities");
  command.command("package-roles").description(`Add package role field to packages that don't have it`).action(lazy.lazy(() => import('./commands/packageRole.cjs.js'), "default"));
  command.command("package-scripts").description("Set package scripts according to each package role").action(lazy.lazy(() => import('./commands/packageScripts.cjs.js'), "command"));
  command.command("package-exports").description("Synchronize package subpath export definitions").action(lazy.lazy(() => import('./commands/packageExports.cjs.js'), "command"));
  command.command("package-lint-configs").description(
    "Migrates all packages to use @backstage/cli/config/eslint-factory"
  ).action(lazy.lazy(() => import('./commands/packageLintConfigs.cjs.js'), "command"));
  command.command("react-router-deps").description(
    "Migrates the react-router dependencies for all packages to be peer dependencies"
  ).action(lazy.lazy(() => import('./commands/reactRouterDeps.cjs.js'), "command"));
}

exports.registerCommands = registerCommands;
//# sourceMappingURL=index.cjs.js.map
