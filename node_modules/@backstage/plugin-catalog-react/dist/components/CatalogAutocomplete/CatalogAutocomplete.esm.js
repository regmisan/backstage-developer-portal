import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import Paper from '@material-ui/core/Paper';
import Popper from '@material-ui/core/Popper';
import TextField from '@material-ui/core/TextField';
import Grow from '@material-ui/core/Grow';
import { makeStyles, withStyles, createStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import React, { useCallback } from 'react';
import { merge } from 'lodash';
import classNames from 'classnames';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      margin: theme.spacing(1, 0)
    },
    label: {
      position: "relative",
      fontWeight: "bold",
      fontSize: theme.typography.body2.fontSize,
      fontFamily: theme.typography.fontFamily,
      color: theme.palette.text.primary,
      "& > span": {
        top: 0,
        left: 0,
        position: "absolute"
      }
    }
  }),
  { name: "BackstageAutocomplete" }
);
const BootstrapAutocomplete = withStyles(
  (theme) => createStyles({
    root: {},
    paper: {
      margin: 0
    },
    hasClearIcon: {},
    hasPopupIcon: {},
    focused: {},
    inputRoot: {
      marginTop: 24,
      backgroundColor: theme.palette.background.paper,
      "$root$hasClearIcon$hasPopupIcon &": {
        paddingBlock: theme.spacing(0.75),
        paddingInlineStart: theme.spacing(0.75)
      },
      "$root$focused &": {
        outline: "none"
      },
      "$root &:hover > fieldset": {
        borderColor: "#ced4da"
      },
      "$root$focused & > fieldset": {
        borderWidth: 1,
        borderColor: theme.palette.primary.main
      }
    },
    popupIndicator: {
      padding: 0,
      margin: 0,
      color: "#616161",
      "&:hover": {
        backgroundColor: "unset"
      },
      '& [class*="MuiTouchRipple-root"]': {
        display: "none"
      }
    },
    endAdornment: {
      "$root$hasClearIcon$hasPopupIcon &": {
        right: 4
      }
    },
    input: {
      "$root$hasClearIcon$hasPopupIcon &": {
        fontSize: theme.typography.body1.fontSize,
        paddingBlock: theme.spacing(0.8125)
      }
    }
  }),
  { name: "BackstageAutocompleteBase" }
)(Autocomplete);
const PopperComponent = (props) => /* @__PURE__ */ React.createElement(Popper, { ...props, transition: true, placement: "bottom-start" }, ({ TransitionProps }) => /* @__PURE__ */ React.createElement(Grow, { ...TransitionProps, style: { transformOrigin: "0 0 0" } }, /* @__PURE__ */ React.createElement(Box, null, props.children)));
const PaperComponent = (props) => /* @__PURE__ */ React.createElement(Paper, { ...props, elevation: 8 });
function CatalogAutocomplete(props) {
  const { label, name, LabelProps, TextFieldProps, ...rest } = props;
  const classes = useStyles();
  const renderInput = useCallback(
    (params) => /* @__PURE__ */ React.createElement(TextField, { ...merge(params, TextFieldProps), variant: "outlined" }),
    [TextFieldProps]
  );
  const autocomplete = /* @__PURE__ */ React.createElement(
    BootstrapAutocomplete,
    {
      size: "small",
      ...rest,
      renderInput: rest.renderInput ?? renderInput,
      popupIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { "data-testid": `${name}-expand` }),
      PaperComponent,
      PopperComponent
    }
  );
  return /* @__PURE__ */ React.createElement(Box, { className: classes.root }, label ? /* @__PURE__ */ React.createElement(
    Typography,
    {
      ...LabelProps,
      className: classNames(classes.label, LabelProps?.className),
      component: "label"
    },
    /* @__PURE__ */ React.createElement(Box, { component: "span" }, label),
    autocomplete
  ) : autocomplete);
}

export { CatalogAutocomplete };
//# sourceMappingURL=CatalogAutocomplete.esm.js.map
