import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import { makeStyles } from '@material-ui/core/styles';
import React, { useEffect } from 'react';
import { AncestryPage } from './components/AncestryPage.esm.js';
import { ColocatedPage } from './components/ColocatedPage.esm.js';
import { JsonPage } from './components/JsonPage.esm.js';
import { OverviewPage } from './components/OverviewPage.esm.js';
import { YamlPage } from './components/YamlPage.esm.js';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles((theme) => ({
  fullHeightDialog: {
    height: "calc(100% - 64px)"
  },
  root: {
    display: "flex",
    flexGrow: 1,
    width: "100%",
    backgroundColor: theme.palette.background.paper
  },
  tabs: {
    borderRight: `1px solid ${theme.palette.divider}`,
    flexShrink: 0
  },
  tabContents: {
    flexGrow: 1,
    overflowX: "auto"
  }
}));
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      role: "tabpanel",
      hidden: value !== index,
      id: `vertical-tabpanel-${index}`,
      "aria-labelledby": `vertical-tab-${index}`,
      className: classes.tabContents,
      ...other
    },
    value === index && /* @__PURE__ */ React.createElement(Box, { pl: 3, pr: 3 }, children)
  );
}
function a11yProps(index) {
  return {
    id: `vertical-tab-${index}`,
    "aria-controls": `vertical-tabpanel-${index}`
  };
}
const tabNames = {
  overview: "Overview",
  ancestry: "Ancestry",
  colocated: "Colocated",
  json: "Raw JSON",
  yaml: "Raw YAML"
};
const tabs = Object.keys(tabNames);
function InspectEntityDialog(props) {
  const classes = useStyles();
  const [activeTab, setActiveTab] = React.useState(
    getTabIndex(tabs, props.initialTab)
  );
  const { t } = useTranslationRef(catalogReactTranslationRef);
  useEffect(() => {
    getTabIndex(tabs, props.initialTab);
  }, [props.open, props.initialTab]);
  if (!props.entity) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      fullWidth: true,
      maxWidth: "xl",
      open: props.open,
      onClose: props.onClose,
      "aria-labelledby": "entity-inspector-dialog-title",
      PaperProps: { className: classes.fullHeightDialog }
    },
    /* @__PURE__ */ React.createElement(DialogTitle, { id: "entity-inspector-dialog-title" }, t("inspectEntityDialog.title")),
    /* @__PURE__ */ React.createElement(DialogContent, { dividers: true }, /* @__PURE__ */ React.createElement("div", { className: classes.root }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        orientation: "vertical",
        variant: "scrollable",
        value: activeTab,
        onChange: (_, tabIndex) => {
          setActiveTab(tabIndex);
          props.onSelect?.(tabs[tabIndex]);
        },
        "aria-label": "Inspector options",
        className: classes.tabs
      },
      tabs.map((tab, index) => /* @__PURE__ */ React.createElement(Tab, { key: tab, label: tabNames[tab], ...a11yProps(index) }))
    ), /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: 0 }, /* @__PURE__ */ React.createElement(OverviewPage, { entity: props.entity })), /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: 1 }, /* @__PURE__ */ React.createElement(AncestryPage, { entity: props.entity })), /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: 2 }, /* @__PURE__ */ React.createElement(ColocatedPage, { entity: props.entity })), /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: 3 }, /* @__PURE__ */ React.createElement(JsonPage, { entity: props.entity })), /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: 4 }, /* @__PURE__ */ React.createElement(YamlPage, { entity: props.entity })))),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, { onClick: props.onClose, color: "primary" }, t("inspectEntityDialog.closeButtonTitle")))
  );
}
function getTabIndex(allTabs, initialTab) {
  return initialTab ? allTabs.indexOf(initialTab) : 0;
}

export { InspectEntityDialog };
//# sourceMappingURL=InspectEntityDialog.esm.js.map
