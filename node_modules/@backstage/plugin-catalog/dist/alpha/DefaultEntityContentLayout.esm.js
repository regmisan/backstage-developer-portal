import React from 'react';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import { EntitySwitch } from '../components/EntitySwitch/EntitySwitch.esm.js';
import { isOrphan, EntityOrphanWarning } from '../components/EntityOrphanWarning/EntityOrphanWarning.esm.js';
import { hasRelationWarnings, EntityRelationWarning } from '../components/EntityRelationWarning/EntityRelationWarning.esm.js';
import { hasCatalogProcessingErrors, EntityProcessingErrorsPanel } from '../components/EntityProcessingErrorsPanel/EntityProcessingErrorsPanel.esm.js';
import { HorizontalScrollGrid } from '@backstage/core-components';

const useStyles = makeStyles((theme) => ({
  root: {
    display: "flex",
    flexFlow: "column nowrap",
    gap: theme.spacing(3)
  },
  contentArea: {
    display: "flex",
    flexFlow: "column",
    gap: theme.spacing(3),
    alignItems: "stretch",
    minWidth: 0
  },
  infoArea: {
    display: "flex",
    flexFlow: "column nowrap",
    alignItems: "stretch",
    gap: theme.spacing(3),
    minWidth: 0
  },
  summaryArea: {
    margin: theme.spacing(1.5)
    // To counteract MUI negative grid margin
  },
  summaryCard: {
    flex: "0 0 auto",
    "& + &": {
      marginLeft: theme.spacing(3)
    }
  },
  [theme.breakpoints.up("md")]: {
    root: {
      display: "grid",
      gap: 0,
      gridTemplateAreas: ({ summaryCards }) => `
        "${summaryCards ? "summary" : "content"} info"
        "content info"
      `,
      gridTemplateColumns: ({ infoCards }) => infoCards ? "2fr 1fr" : "1fr",
      alignItems: "start"
    },
    infoArea: {
      gridArea: "info",
      position: "sticky",
      top: theme.spacing(3),
      marginLeft: theme.spacing(3)
    },
    contentArea: {
      gridArea: "content"
    },
    summaryArea: {
      gridArea: "summary",
      marginBottom: theme.spacing(3)
    }
  }
}));
const entityWarningContent = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(EntitySwitch, null, /* @__PURE__ */ React.createElement(EntitySwitch.Case, { if: isOrphan }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(EntityOrphanWarning, null)))), /* @__PURE__ */ React.createElement(EntitySwitch, null, /* @__PURE__ */ React.createElement(EntitySwitch.Case, { if: hasRelationWarnings }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(EntityRelationWarning, null)))), /* @__PURE__ */ React.createElement(EntitySwitch, null, /* @__PURE__ */ React.createElement(EntitySwitch.Case, { if: hasCatalogProcessingErrors }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(EntityProcessingErrorsPanel, null)))));
function DefaultEntityContentLayout(props) {
  const { cards } = props;
  const infoCards = cards.filter((card) => card.type === "info");
  const summaryCards = cards.filter((card) => card.type === "summary");
  const contentCards = cards.filter(
    (card) => !card.type || card.type === "content"
  );
  const classes = useStyles({
    infoCards: !!infoCards.length,
    summaryCards: !!summaryCards.length,
    contentCards: !!contentCards.length
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, entityWarningContent, /* @__PURE__ */ React.createElement("div", { className: classes.root }, infoCards.length > 0 ? /* @__PURE__ */ React.createElement("div", { className: classes.infoArea }, infoCards.map((card) => card.element)) : null, summaryCards.length > 0 ? /* @__PURE__ */ React.createElement("div", { className: classes.summaryArea }, /* @__PURE__ */ React.createElement(HorizontalScrollGrid, null, summaryCards.map((card) => /* @__PURE__ */ React.createElement("div", { className: classes.summaryCard }, card.element)))) : null, contentCards.length > 0 ? /* @__PURE__ */ React.createElement("div", { className: classes.contentArea }, contentCards.map((card) => card.element)) : null));
}

export { DefaultEntityContentLayout };
//# sourceMappingURL=DefaultEntityContentLayout.esm.js.map
