import React from 'react';
import Alert from '@material-ui/lab/Alert';
import { attachComponentData, useRouteRefParams, useElementFilter } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { Page, Progress, Content, WarningPanel, Link } from '@backstage/core-components';
import { entityRouteRef, useAsyncEntity } from '@backstage/plugin-catalog-react';
import { catalogTranslationRef } from '../../translation.esm.js';
import { EntityHeader } from '../EntityHeader/EntityHeader.esm.js';
import { EntityTabs } from '../EntityTabs/EntityTabs.esm.js';

const dataKey = "plugin.catalog.entityLayoutRoute";
const Route = () => null;
attachComponentData(Route, dataKey, true);
attachComponentData(Route, "core.gatherMountPoints", true);
const EntityLayout = (props) => {
  const {
    UNSTABLE_extraContextMenuItems,
    UNSTABLE_contextMenuOptions,
    children,
    header,
    NotFoundComponent,
    parentEntityRelations
  } = props;
  const { kind } = useRouteRefParams(entityRouteRef);
  const { entity, loading, error } = useAsyncEntity();
  const routes = useElementFilter(
    children,
    (elements) => elements.selectByComponentData({
      key: dataKey,
      withStrictError: "Child of EntityLayout must be an EntityLayout.Route"
    }).getElements().flatMap(({ props: elementProps }) => {
      if (!entity) {
        return [];
      }
      if (elementProps.if && !elementProps.if(entity)) {
        return [];
      }
      return [
        {
          path: elementProps.path,
          title: elementProps.title,
          group: elementProps.group,
          children: elementProps.children
        }
      ];
    }),
    [entity]
  );
  const { t } = useTranslationRef(catalogTranslationRef);
  return /* @__PURE__ */ React.createElement(Page, { themeId: entity?.spec?.type?.toString() ?? "home" }, header ?? /* @__PURE__ */ React.createElement(
    EntityHeader,
    {
      parentEntityRelations,
      UNSTABLE_contextMenuOptions,
      UNSTABLE_extraContextMenuItems
    }
  ), loading && /* @__PURE__ */ React.createElement(Progress, null), entity && /* @__PURE__ */ React.createElement(EntityTabs, { routes }), error && /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, error.toString())), !loading && !error && !entity && /* @__PURE__ */ React.createElement(Content, null, NotFoundComponent ? NotFoundComponent : /* @__PURE__ */ React.createElement(WarningPanel, { title: t("entityLabels.warningPanelTitle") }, "There is no ", kind, " with the requested", " ", /* @__PURE__ */ React.createElement(Link, { to: "https://backstage.io/docs/features/software-catalog/references" }, "kind, namespace, and name"), ".")));
};
EntityLayout.Route = Route;

export { EntityLayout };
//# sourceMappingURL=EntityLayout.esm.js.map
