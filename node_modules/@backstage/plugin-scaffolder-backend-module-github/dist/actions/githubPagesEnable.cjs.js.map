{"version":3,"file":"githubPagesEnable.cjs.js","sources":["../../src/actions/githubPagesEnable.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './githubPagesEnable.examples';\nimport { getOctokitOptions } from '../util';\n\n/**\n * Creates a new action that enables GitHub Pages for a repository.\n *\n * @public\n */\nexport function createGithubPagesEnableAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    buildType?: 'legacy' | 'workflow';\n    sourceBranch?: string;\n    sourcePath?: '/' | '/docs';\n    token?: string;\n  }>({\n    id: 'github:pages:enable',\n    examples,\n    description: 'Enables GitHub Pages for a repository.',\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description:\n              'Accepts the format `github.com?repo=reponame&owner=owner` where `reponame` is the new repository name and `owner` is an organization or username',\n            type: 'string',\n          },\n          buildType: {\n            title: 'Build Type',\n            type: 'string',\n            default: 'workflow',\n            description:\n              'The GitHub Pages build type - `legacy` or `workflow`. Default is `workflow`',\n            enum: ['legacy', 'workflow'],\n          },\n          sourceBranch: {\n            title: 'Source Branch',\n            type: 'string',\n            default: 'main',\n            description: 'The GitHub Pages source branch. Default is \"main\"',\n          },\n          sourcePath: {\n            title: 'Source Path',\n            type: 'string',\n            default: '/',\n            description:\n              'The GitHub Pages source path - \"/\" or \"/docs\". Default is \"/\"',\n            enum: ['/', '/docs'],\n          },\n          token: {\n            title: 'Authorization Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        buildType = 'workflow',\n        sourceBranch = 'main',\n        sourcePath = '/',\n        token: providedToken,\n      } = ctx.input;\n\n      const { host, owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        host,\n        owner,\n        repo,\n      });\n      const client = new Octokit(octokitOptions);\n\n      ctx.logger.info(\n        `Attempting to enable GitHub Pages for ${owner}/${repo} with \"${buildType}\" build type, on source branch \"${sourceBranch}\" and source path \"${sourcePath}\"`,\n      );\n\n      await ctx.checkpoint({\n        key: `enabled.github.pages.${owner}.${repo}`,\n        fn: async () => {\n          await client.request('POST /repos/{owner}/{repo}/pages', {\n            owner: owner,\n            repo: repo,\n            build_type: buildType,\n            source: {\n              branch: sourceBranch,\n              path: sourcePath,\n            },\n            headers: {\n              'X-GitHub-Api-Version': '2022-11-28',\n            },\n          });\n        },\n      });\n\n      ctx.logger.info('Completed enabling GitHub Pages');\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getOctokitOptions","Octokit"],"mappings":"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"}