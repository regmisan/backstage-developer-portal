{"version":3,"file":"gitlabProjectMigrate.cjs.js","sources":["../../src/actions/gitlabProjectMigrate.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { InputError } from '@backstage/errors';\nimport { createGitlabApi } from './helpers';\nimport { examples } from './gitlabRepoPush.examples';\nimport { MigrationEntityOptions } from '@gitbeaker/rest';\n\n/**\n * Create a new action that imports a gitlab project into another gitlab project (potentially from another gitlab instance).\n *\n * @public\n */\nexport const createGitlabProjectMigrateAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    destinationAccessToken: string;\n    destinationUrl: string;\n    sourceAccessToken: string;\n    sourceFullPath: string;\n    sourceUrl: string;\n  }>({\n    id: 'gitlab:group:migrate',\n    examples,\n    schema: {\n      input: {\n        required: [\n          'destinationAccessToken',\n          'destinationUrl',\n          'sourceAccessToken',\n          'sourceFullPath',\n          'sourceUrl',\n        ],\n        type: 'object',\n        properties: {\n          destinationAccessToken: {\n            type: 'string',\n            title: 'Target Repository Access Token',\n            description: `The token to use for authorization to the target GitLab'`,\n          },\n          destinationUrl: {\n            type: 'string',\n            title: 'Target Project Location',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          sourceAccessToken: {\n            type: 'string',\n            title: 'Source Group Access Token',\n            description: `The token to use for authorization to the source GitLab'`,\n          },\n          sourceFullPath: {\n            type: 'string',\n            title: 'Group Full Path',\n            description:\n              'Full path to the project in the source Gitlab instance',\n          },\n          sourceUrl: {\n            type: 'string',\n            title: 'Source URL Location',\n            description: `Accepts the format 'https://gitlab.com/'`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          importedRepoUrl: {\n            title: 'URL to the newly imported repo',\n            type: 'string',\n          },\n          migrationId: {\n            title: 'Id of the migration that imports the project',\n            type: 'number',\n          },\n        },\n      },\n    },\n\n    async handler(ctx) {\n      const {\n        destinationAccessToken,\n        destinationUrl,\n        sourceAccessToken,\n        sourceFullPath,\n        sourceUrl,\n      } = ctx.input;\n\n      const {\n        host: destinationHost,\n        repo: destinationSlug,\n        owner: destinationNamespace,\n      } = parseRepoUrl(destinationUrl, integrations);\n\n      if (!destinationNamespace) {\n        throw new InputError(\n          `Failed to determine target repository to migrate to. Make sure destinationUrl matches the format 'gitlab.myorg.com?repo=project_name&owner=group_name'`,\n        );\n      }\n\n      const api = createGitlabApi({\n        integrations,\n        token: destinationAccessToken,\n        repoUrl: destinationUrl,\n      });\n\n      const migrationEntity: MigrationEntityOptions[] = [\n        {\n          sourceType: 'project_entity',\n          sourceFullPath: sourceFullPath,\n          destinationSlug: destinationSlug,\n          destinationNamespace: destinationNamespace,\n        },\n      ];\n\n      const sourceConfig = {\n        url: sourceUrl,\n        access_token: sourceAccessToken,\n      };\n\n      try {\n        const migrationId = await ctx.checkpoint({\n          key: `create.migration.${sourceUrl}`,\n          fn: async () => {\n            const migrationStatus = await api.Migrations.create(\n              sourceConfig,\n              migrationEntity,\n            );\n            return migrationStatus.id;\n          },\n        });\n\n        ctx.output(\n          'importedRepoUrl',\n          `${destinationHost}/${destinationNamespace}/${destinationSlug}`,\n        );\n        ctx.output('migrationId', migrationId);\n      } catch (e: any) {\n        throw new InputError(\n          `Failed to transfer repo ${sourceFullPath}. Make sure that ${sourceFullPath} exists in ${sourceUrl}, and token has enough rights.\\nError: ${e}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","createGitlabApi"],"mappings":";;;;;;;AA+Ba,MAAA,gCAAA,GAAmC,CAAC,OAE3C,KAAA;AACJ,EAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AAEzB,EAAA,OAAOA,yCAMJ,CAAA;AAAA,IACD,EAAI,EAAA,sBAAA;AAAA,cACJC,gCAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,QAAU,EAAA;AAAA,UACR,wBAAA;AAAA,UACA,gBAAA;AAAA,UACA,mBAAA;AAAA,UACA,gBAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,sBAAwB,EAAA;AAAA,YACtB,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,gCAAA;AAAA,YACP,WAAa,EAAA,CAAA,wDAAA;AAAA,WACf;AAAA,UACA,cAAgB,EAAA;AAAA,YACd,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,yBAAA;AAAA,YACP,WAAa,EAAA,CAAA,sJAAA;AAAA,WACf;AAAA,UACA,iBAAmB,EAAA;AAAA,YACjB,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,2BAAA;AAAA,YACP,WAAa,EAAA,CAAA,wDAAA;AAAA,WACf;AAAA,UACA,cAAgB,EAAA;AAAA,YACd,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,iBAAA;AAAA,YACP,WACE,EAAA;AAAA,WACJ;AAAA,UACA,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,QAAA;AAAA,YACN,KAAO,EAAA,qBAAA;AAAA,YACP,WAAa,EAAA,CAAA,wCAAA;AAAA;AACf;AACF,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,eAAiB,EAAA;AAAA,YACf,KAAO,EAAA,gCAAA;AAAA,YACP,IAAM,EAAA;AAAA,WACR;AAAA,UACA,WAAa,EAAA;AAAA,YACX,KAAO,EAAA,8CAAA;AAAA,YACP,IAAM,EAAA;AAAA;AACR;AACF;AACF,KACF;AAAA,IAEA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,sBAAA;AAAA,QACA,cAAA;AAAA,QACA,iBAAA;AAAA,QACA,cAAA;AAAA,QACA;AAAA,UACE,GAAI,CAAA,KAAA;AAER,MAAM,MAAA;AAAA,QACJ,IAAM,EAAA,eAAA;AAAA,QACN,IAAM,EAAA,eAAA;AAAA,QACN,KAAO,EAAA;AAAA,OACT,GAAIC,iCAAa,CAAA,cAAA,EAAgB,YAAY,CAAA;AAE7C,MAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,sJAAA;AAAA,SACF;AAAA;AAGF,MAAA,MAAM,MAAMC,uBAAgB,CAAA;AAAA,QAC1B,YAAA;AAAA,QACA,KAAO,EAAA,sBAAA;AAAA,QACP,OAAS,EAAA;AAAA,OACV,CAAA;AAED,MAAA,MAAM,eAA4C,GAAA;AAAA,QAChD;AAAA,UACE,UAAY,EAAA,gBAAA;AAAA,UACZ,cAAA;AAAA,UACA,eAAA;AAAA,UACA;AAAA;AACF,OACF;AAEA,MAAA,MAAM,YAAe,GAAA;AAAA,QACnB,GAAK,EAAA,SAAA;AAAA,QACL,YAAc,EAAA;AAAA,OAChB;AAEA,MAAI,IAAA;AACF,QAAM,MAAA,WAAA,GAAc,MAAM,GAAA,CAAI,UAAW,CAAA;AAAA,UACvC,GAAA,EAAK,oBAAoB,SAAS,CAAA,CAAA;AAAA,UAClC,IAAI,YAAY;AACd,YAAM,MAAA,eAAA,GAAkB,MAAM,GAAA,CAAI,UAAW,CAAA,MAAA;AAAA,cAC3C,YAAA;AAAA,cACA;AAAA,aACF;AACA,YAAA,OAAO,eAAgB,CAAA,EAAA;AAAA;AACzB,SACD,CAAA;AAED,QAAI,GAAA,CAAA,MAAA;AAAA,UACF,iBAAA;AAAA,UACA,CAAG,EAAA,eAAe,CAAI,CAAA,EAAA,oBAAoB,IAAI,eAAe,CAAA;AAAA,SAC/D;AACA,QAAI,GAAA,CAAA,MAAA,CAAO,eAAe,WAAW,CAAA;AAAA,eAC9B,CAAQ,EAAA;AACf,QAAA,MAAM,IAAID,iBAAA;AAAA,UACR,CAA2B,wBAAA,EAAA,cAAc,CAAoB,iBAAA,EAAA,cAAc,cAAc,SAAS,CAAA;AAAA,OAAA,EAA0C,CAAC,CAAA;AAAA,SAC/I;AAAA;AACF;AACF,GACD,CAAA;AACH;;;;"}