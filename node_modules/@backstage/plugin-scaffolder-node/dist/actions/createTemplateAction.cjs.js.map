{"version":3,"file":"createTemplateAction.cjs.js","sources":["../../src/actions/createTemplateAction.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionContext, TemplateAction } from './types';\nimport { z } from 'zod';\nimport { Expand, JsonObject } from '@backstage/types';\nimport { parseSchemas } from './util';\n\n/** @public */\nexport type TemplateExample = {\n  description: string;\n  example: string;\n};\n\n/** @public */\nexport type TemplateActionOptions<\n  TActionInput extends JsonObject = {},\n  TActionOutput extends JsonObject = {},\n  TInputSchema extends\n    | JsonObject\n    | z.ZodType\n    | { [key in string]: (zImpl: typeof z) => z.ZodType } = JsonObject,\n  TOutputSchema extends\n    | JsonObject\n    | z.ZodType\n    | { [key in string]: (zImpl: typeof z) => z.ZodType } = JsonObject,\n  TSchemaType extends 'v1' | 'v2' = 'v1' | 'v2',\n> = {\n  id: string;\n  description?: string;\n  examples?: TemplateExample[];\n  supportsDryRun?: boolean;\n  schema?: {\n    input?: TInputSchema;\n    output?: TOutputSchema;\n  };\n  handler: (\n    ctx: ActionContext<TActionInput, TActionOutput, TSchemaType>,\n  ) => Promise<void>;\n};\n\n/**\n * @ignore\n */\ntype FlattenOptionalProperties<T extends { [key in string]: unknown }> = Expand<\n  {\n    [K in keyof T as undefined extends T[K] ? never : K]: T[K];\n  } & {\n    [K in keyof T as undefined extends T[K] ? K : never]?: T[K];\n  }\n>;\n\n/**\n * @public\n * @deprecated migrate to using the new built in zod schema definitions for schemas\n */\nexport function createTemplateAction<\n  TInputParams extends JsonObject = JsonObject,\n  TOutputParams extends JsonObject = JsonObject,\n  TInputSchema extends JsonObject = JsonObject,\n  TOutputSchema extends JsonObject = JsonObject,\n  TActionInput extends JsonObject = TInputParams,\n  TActionOutput extends JsonObject = TOutputParams,\n>(\n  action: TemplateActionOptions<\n    TActionInput,\n    TActionOutput,\n    TInputSchema,\n    TOutputSchema,\n    'v1'\n  >,\n): TemplateAction<TActionInput, TActionOutput, 'v1'>;\n/**\n * @public\n * @deprecated migrate to using the new built in zod schema definitions for schemas\n */\nexport function createTemplateAction<\n  TInputParams extends JsonObject = JsonObject,\n  TOutputParams extends JsonObject = JsonObject,\n  TInputSchema extends z.ZodType = z.ZodType,\n  TOutputSchema extends z.ZodType = z.ZodType,\n  TActionInput extends JsonObject = z.infer<TInputSchema>,\n  TActionOutput extends JsonObject = z.infer<TOutputSchema>,\n>(\n  action: TemplateActionOptions<\n    TActionInput,\n    TActionOutput,\n    TInputSchema,\n    TOutputSchema,\n    'v1'\n  >,\n): TemplateAction<TActionInput, TActionOutput, 'v1'>;\n/**\n * This function is used to create new template actions to get type safety.\n * Will convert zod schemas to json schemas for use throughout the system.\n * @public\n */\nexport function createTemplateAction<\n  TInputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType },\n  TOutputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType },\n>(\n  action: TemplateActionOptions<\n    {\n      [key in keyof TInputSchema]: z.infer<ReturnType<TInputSchema[key]>>;\n    },\n    {\n      [key in keyof TOutputSchema]: z.infer<ReturnType<TOutputSchema[key]>>;\n    },\n    TInputSchema,\n    TOutputSchema,\n    'v2'\n  >,\n): TemplateAction<\n  FlattenOptionalProperties<{\n    [key in keyof TInputSchema]: z.output<ReturnType<TInputSchema[key]>>;\n  }>,\n  FlattenOptionalProperties<{\n    [key in keyof TOutputSchema]: z.output<ReturnType<TOutputSchema[key]>>;\n  }>,\n  'v2'\n>;\nexport function createTemplateAction<\n  TInputParams extends JsonObject = JsonObject,\n  TOutputParams extends JsonObject = JsonObject,\n  TInputSchema extends\n    | JsonObject\n    | z.ZodType\n    | { [key in string]: (zImpl: typeof z) => z.ZodType } = JsonObject,\n  TOutputSchema extends\n    | JsonObject\n    | z.ZodType\n    | { [key in string]: (zImpl: typeof z) => z.ZodType } = JsonObject,\n  TActionInput extends JsonObject = TInputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TInputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType }\n    ? Expand<{\n        [key in keyof TInputSchema]: z.infer<ReturnType<TInputSchema[key]>>;\n      }>\n    : TInputParams,\n  TActionOutput extends JsonObject = TOutputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TOutputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType }\n    ? Expand<{\n        [key in keyof TOutputSchema]: z.infer<ReturnType<TOutputSchema[key]>>;\n      }>\n    : TOutputParams,\n>(\n  action: TemplateActionOptions<\n    TActionInput,\n    TActionOutput,\n    TInputSchema,\n    TOutputSchema\n  >,\n): TemplateAction<\n  TActionInput,\n  TActionOutput,\n  TInputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType }\n    ? 'v2'\n    : 'v1'\n> {\n  const { inputSchema, outputSchema } = parseSchemas(\n    action as TemplateActionOptions<any, any, any>,\n  );\n\n  return {\n    ...action,\n    schema: {\n      ...action.schema,\n      input: inputSchema,\n      output: outputSchema,\n    },\n  };\n}\n"],"names":["parseSchemas"],"mappings":";;;;AAsIO,SAAS,qBAkCd,MAYA,EAAA;AACA,EAAM,MAAA,EAAE,WAAa,EAAA,YAAA,EAAiB,GAAAA,iBAAA;AAAA,IACpC;AAAA,GACF;AAEA,EAAO,OAAA;AAAA,IACL,GAAG,MAAA;AAAA,IACH,MAAQ,EAAA;AAAA,MACN,GAAG,MAAO,CAAA,MAAA;AAAA,MACV,KAAO,EAAA,WAAA;AAAA,MACP,MAAQ,EAAA;AAAA;AACV,GACF;AACF;;;;"}