{"version":3,"file":"util.cjs.js","sources":["../../src/actions/util.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { isChildPath } from '@backstage/backend-plugin-api';\nimport { join as joinPath, normalize as normalizePath } from 'path';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { TemplateActionOptions } from './createTemplateAction';\nimport zodToJsonSchema from 'zod-to-json-schema';\nimport { z } from 'zod';\nimport { Schema } from 'jsonschema';\n\n/**\n * @public\n */\nexport const getRepoSourceDirectory = (\n  workspacePath: string,\n  sourcePath: string | undefined,\n) => {\n  if (sourcePath) {\n    const safeSuffix = normalizePath(sourcePath).replace(\n      /^(\\.\\.(\\/|\\\\|$))+/,\n      '',\n    );\n    const path = joinPath(workspacePath, safeSuffix);\n    if (!isChildPath(workspacePath, path)) {\n      throw new Error('Invalid source path');\n    }\n    return path;\n  }\n  return workspacePath;\n};\n\n/**\n * @public\n */\nexport const parseRepoUrl = (\n  repoUrl: string,\n  integrations: ScmIntegrationRegistry,\n): {\n  repo: string;\n  host: string;\n  owner?: string;\n  organization?: string;\n  workspace?: string;\n  project?: string;\n} => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  const host = parsed.host;\n  const owner = parsed.searchParams.get('owner') ?? undefined;\n  const organization = parsed.searchParams.get('organization') ?? undefined;\n  const workspace = parsed.searchParams.get('workspace') ?? undefined;\n  const project = parsed.searchParams.get('project') ?? undefined;\n\n  const type = integrations.byHost(host)?.type;\n\n  if (!type) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const repo: string = parsed.searchParams.get('repo')!;\n  switch (type) {\n    case 'bitbucket': {\n      if (host === 'www.bitbucket.org') {\n        checkRequiredParams(parsed, 'workspace');\n      }\n      checkRequiredParams(parsed, 'project', 'repo');\n      break;\n    }\n    case 'azure': {\n      checkRequiredParams(parsed, 'project', 'repo');\n      break;\n    }\n    case 'gitlab': {\n      // project is the projectID, and if defined, owner and repo won't be needed.\n      if (!project) {\n        checkRequiredParams(parsed, 'owner', 'repo');\n      }\n      break;\n    }\n    case 'gitea': {\n      checkRequiredParams(parsed, 'repo');\n      break;\n    }\n    case 'gerrit': {\n      checkRequiredParams(parsed, 'repo');\n      break;\n    }\n    default: {\n      checkRequiredParams(parsed, 'repo', 'owner');\n      break;\n    }\n  }\n\n  return { host, owner, repo, organization, workspace, project };\n};\n\nfunction checkRequiredParams(repoUrl: URL, ...params: string[]) {\n  for (let i = 0; i < params.length; i++) {\n    if (!repoUrl.searchParams.get(params[i])) {\n      throw new InputError(\n        `Invalid repo URL passed to publisher: ${repoUrl.toString()}, missing ${\n          params[i]\n        }`,\n      );\n    }\n  }\n}\n\nconst isZodSchema = (schema: unknown): schema is z.ZodType => {\n  return typeof schema === 'object' && !!schema && 'safeParseAsync' in schema;\n};\n\nconst isNativeZodSchema = (\n  schema: unknown,\n): schema is { [key in string]: (zImpl: typeof z) => z.ZodType } => {\n  return (\n    typeof schema === 'object' &&\n    !!schema &&\n    Object.values(schema).every(v => typeof v === 'function')\n  );\n};\n\nexport const parseSchemas = (\n  action: TemplateActionOptions,\n): { inputSchema?: Schema; outputSchema?: Schema } => {\n  if (!action.schema) {\n    return { inputSchema: undefined, outputSchema: undefined };\n  }\n\n  if (isZodSchema(action.schema.input)) {\n    return {\n      inputSchema: zodToJsonSchema(action.schema.input) as Schema,\n      outputSchema: isZodSchema(action.schema.output)\n        ? (zodToJsonSchema(action.schema.output) as Schema)\n        : undefined,\n    };\n  }\n\n  if (isNativeZodSchema(action.schema.input)) {\n    const input = z.object(\n      Object.fromEntries(\n        Object.entries(action.schema.input).map(([k, v]) => [k, v(z)]),\n      ),\n    );\n\n    return {\n      inputSchema: zodToJsonSchema(input) as Schema,\n      outputSchema: isNativeZodSchema(action.schema.output)\n        ? (zodToJsonSchema(\n            z.object(\n              Object.fromEntries(\n                Object.entries(action.schema.output).map(([k, v]) => [k, v(z)]),\n              ),\n            ),\n          ) as Schema)\n        : undefined,\n    };\n  }\n\n  return {\n    inputSchema: action.schema.input,\n    outputSchema: action.schema.output,\n  };\n};\n"],"names":["normalizePath","path","joinPath","isChildPath","InputError","zodToJsonSchema","z"],"mappings":"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"}