{"version":3,"file":"createTemplateGlobal.cjs.js","sources":["../../../src/alpha/globals/createTemplateGlobal.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\nimport {\n  CreatedTemplateGlobalFunction,\n  CreatedTemplateGlobalValue,\n  TemplateGlobalFunctionSchema,\n} from './types';\nimport { JsonValue } from '@backstage/types';\n\n/**\n * This function is used to create new template global values in type-safe manner.\n * @param t - CreatedTemplateGlobalValue | CreatedTemplateGlobalFunction\n * @returns t\n * @alpha\n */\nexport const createTemplateGlobalValue = (\n  v: CreatedTemplateGlobalValue,\n): CreatedTemplateGlobalValue => v;\n\n/**\n * This function is used to create new template global functions in type-safe manner.\n * @param fn - CreatedTemplateGlobalFunction\n * @returns fn\n * @alpha\n */\nexport const createTemplateGlobalFunction = <\n  TSchema extends TemplateGlobalFunctionSchema<any, any> | undefined,\n  TFilterSchema extends TSchema extends TemplateGlobalFunctionSchema<any, any>\n    ? z.infer<ReturnType<TSchema>>\n    : (...args: JsonValue[]) => JsonValue | undefined,\n>(\n  fn: CreatedTemplateGlobalFunction<TSchema, TFilterSchema>,\n): CreatedTemplateGlobalFunction<any, any> => fn;\n"],"names":[],"mappings":";;AA8Ba,MAAA,yBAAA,GAA4B,CACvC,CAC+B,KAAA;AAQpB,MAAA,4BAAA,GAA+B,CAM1C,EAC4C,KAAA;;;;;"}