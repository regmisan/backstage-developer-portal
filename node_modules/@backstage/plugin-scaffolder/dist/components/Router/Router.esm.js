import React from 'react';
import { useOutlet, Routes, Route } from 'react-router-dom';
import { useCustomFieldExtensions, useCustomLayouts, SecretsContextProvider } from '@backstage/plugin-scaffolder-react';
import { DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS } from '../../extensions/default.esm.js';
import { selectedTemplateRouteRef, scaffolderTaskRouteRef, editRouteRef, customFieldsRouteRef, templateFormRouteRef, actionsRouteRef, scaffolderListTaskRouteRef, editorRouteRef } from '../../routes.esm.js';
import { ActionsPage } from '../ActionsPage/ActionsPage.esm.js';
import { ListTasksPage } from '../ListTasksPage/ListTasksPage.esm.js';
import { TemplateListPage } from '../../alpha/components/TemplateListPage/TemplateListPage.esm.js';
import { TemplateWizardPage } from '../../alpha/components/TemplateWizardPage/TemplateWizardPage.esm.js';
import { OngoingTask } from '../OngoingTask/OngoingTask.esm.js';
import { TemplateEditorPage } from '../../alpha/components/TemplateEditorPage/TemplateEditorPage.esm.js';
import { TemplateFormPage } from '../../alpha/components/TemplateEditorPage/TemplateFormPage.esm.js';
import { TemplateIntroPage } from '../../alpha/components/TemplateEditorPage/TemplateIntroPage.esm.js';
import { CustomFieldsPage } from '../../alpha/components/TemplateEditorPage/CustomFieldsPage.esm.js';
import { RequirePermission } from '@backstage/plugin-permission-react';
import { taskReadPermission, templateManagementPermission } from '@backstage/plugin-scaffolder-common/alpha';
import { useApp } from '@backstage/core-plugin-api';
import { useAsync, useMountEffect } from '@react-hookz/web';
import { OpaqueFormField } from '../../packages/scaffolder-internal/src/wiring/InternalFormField.esm.js';
import '../../packages/scaffolder-internal/src/wiring/InternalFormDecorator.esm.js';

const InternalRouter = (props) => {
  const {
    components: {
      TemplateCardComponent,
      TaskPageComponent = OngoingTask,
      ReviewStepComponent,
      EXPERIMENTAL_TemplateOutputsComponent: TemplateOutputsComponent,
      EXPERIMENTAL_TemplateListPageComponent: TemplateListPageComponent = TemplateListPage,
      EXPERIMENTAL_TemplateWizardPageComponent: TemplateWizardPageComponent = TemplateWizardPage
    } = {}
  } = props;
  const outlet = useOutlet() || props.children;
  const customFieldExtensions = useCustomFieldExtensions(outlet);
  const loadedFieldExtensions = useFormFieldLoaders(props.formFieldLoaders);
  const app = useApp();
  const { NotFoundErrorPage } = app.getComponents();
  const fieldExtensions = [
    ...customFieldExtensions,
    ...loadedFieldExtensions,
    ...DEFAULT_SCAFFOLDER_FIELD_EXTENSIONS.filter(
      ({ name }) => !customFieldExtensions.some(
        (customFieldExtension) => customFieldExtension.name === name
      )
    )
  ];
  const customLayouts = useCustomLayouts(outlet);
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "/",
      element: /* @__PURE__ */ React.createElement(
        TemplateListPageComponent,
        {
          TemplateCardComponent,
          contextMenu: props.contextMenu,
          groups: props.groups,
          templateFilter: props.templateFilter,
          headerOptions: props.headerOptions
        }
      )
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: selectedTemplateRouteRef.path,
      element: /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateWizardPageComponent,
        {
          headerOptions: props.headerOptions,
          customFieldExtensions: fieldExtensions,
          layouts: customLayouts,
          components: { ReviewStepComponent },
          formProps: props.formProps
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: taskReadPermission }, /* @__PURE__ */ React.createElement(
        TaskPageComponent,
        {
          TemplateOutputsComponent
        }
      ))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: editRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: templateManagementPermission }, /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(TemplateIntroPage, null)))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: customFieldsRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: templateManagementPermission }, /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(CustomFieldsPage, { fieldExtensions })))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: templateFormRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: templateManagementPermission }, /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateFormPage,
        {
          layouts: customLayouts,
          formProps: props.formProps,
          fieldExtensions
        }
      )))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: actionsRouteRef.path,
      element: /* @__PURE__ */ React.createElement(ActionsPage, { contextMenu: props.contextMenu })
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: scaffolderListTaskRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: taskReadPermission }, /* @__PURE__ */ React.createElement(ListTasksPage, { contextMenu: props.contextMenu }))
    }
  ), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: editorRouteRef.path,
      element: /* @__PURE__ */ React.createElement(RequirePermission, { permission: templateManagementPermission }, /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(
        TemplateEditorPage,
        {
          layouts: customLayouts,
          formProps: props.formProps,
          fieldExtensions
        }
      )))
    }
  ), /* @__PURE__ */ React.createElement(Route, { path: "*", element: /* @__PURE__ */ React.createElement(NotFoundErrorPage, null) }));
};
const Router = (props) => {
  return /* @__PURE__ */ React.createElement(InternalRouter, { ...props });
};
function useFormFieldLoaders(formFieldLoaders) {
  const [{ result: loadedFieldExtensions }, { execute }] = useAsync(async () => {
    const loaded = await Promise.all(
      (formFieldLoaders ?? []).map((loader) => loader())
    );
    return loaded.map((f) => OpaqueFormField.toInternal(f));
  }, []);
  useMountEffect(execute);
  return loadedFieldExtensions;
}

export { InternalRouter, Router };
//# sourceMappingURL=Router.esm.js.map
